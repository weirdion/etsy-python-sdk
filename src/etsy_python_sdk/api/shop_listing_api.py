# coding: utf-8

"""
    Etsy Open API v3

    <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

    The version of the OpenAPI document: 3.0.0
    Contact: developers@etsy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from etsy_python_sdk.models.listing_property_value import ListingPropertyValue
from etsy_python_sdk.models.listing_property_values import ListingPropertyValues
from etsy_python_sdk.models.shop_listing import ShopListing
from etsy_python_sdk.models.shop_listing_with_associations import ShopListingWithAssociations
from etsy_python_sdk.models.shop_listings import ShopListings
from etsy_python_sdk.models.shop_listings_with_associations import ShopListingsWithAssociations

from etsy_python_sdk.api_client import ApiClient, RequestSerialized
from etsy_python_sdk.api_response import ApiResponse
from etsy_python_sdk.rest import RESTResponseType


class ShopListingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_draft_listing(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        quantity: Annotated[StrictInt, Field(description="The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.")],
        title: Annotated[StrictStr, Field(description="The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.")],
        description: Annotated[StrictStr, Field(description="A description string of the product for sale in the listing.")],
        price: Annotated[Union[StrictFloat, StrictInt], Field(description="The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The [`getListingInventory`](/documentation/reference/#operation/getListingInventory) method requests exact prices for available offerings.")],
        who_made: Annotated[StrictStr, Field(description="An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.")],
        when_made: Annotated[StrictStr, Field(description="An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.")],
        taxonomy_id: Annotated[int, Field(strict=True, ge=1, description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")],
        shipping_profile_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.")] = None,
        return_policy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).")] = None,
        materials: Annotated[Optional[List[StrictStr]], Field(description="A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")] = None,
        shop_section_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.")] = None,
        processing_min: Annotated[Optional[StrictInt], Field(description="The minimum number of days required to process this listing. Default value is null.")] = None,
        processing_max: Annotated[Optional[StrictInt], Field(description="The maximum number of days required to process this listing. Default value is null.")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.")] = None,
        styles: Annotated[Optional[List[StrictStr]], Field(description="An array of style strings for this listing, each of which is free-form text string such as \\\"Formal\\\", or \\\"Steampunk\\\". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")] = None,
        item_weight: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_length: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_width: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_height: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_weight_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the weight of the product. Default value is null.")] = None,
        item_dimensions_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the dimensions of the product. Default value is null.")] = None,
        is_personalizable: Annotated[Optional[StrictBool], Field(description="When true, this listing is personalizable. The default value is null.")] = None,
        personalization_is_required: Annotated[Optional[StrictBool], Field(description="When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.")] = None,
        personalization_char_count_max: Annotated[Optional[StrictInt], Field(description="This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.")] = None,
        personalization_instructions: Annotated[Optional[StrictStr], Field(description="A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.")] = None,
        production_partner_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of unique IDs of production partner ids.")] = None,
        image_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of numeric image IDs of the images in a listing, which can include up to 10 images.")] = None,
        is_supply: Annotated[Optional[StrictBool], Field(description="When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.")] = None,
        is_customizable: Annotated[Optional[StrictBool], Field(description="When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.")] = None,
        should_auto_renew: Annotated[Optional[StrictBool], Field(description="When true, renews a listing for four months upon expiration.")] = None,
        is_taxable: Annotated[Optional[StrictBool], Field(description="When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="An enumerated type string that indicates whether the listing is physical or a digital download.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopListing:
        """create_draft_listing

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Creates a physical draft [listing](/documentation/reference#tag/ShopListing) product in a shop on the Etsy channel.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param quantity: The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint. (required)
        :type quantity: int
        :param title: The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each. (required)
        :type title: str
        :param description: A description string of the product for sale in the listing. (required)
        :type description: str
        :param price: The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The [`getListingInventory`](/documentation/reference/#operation/getListingInventory) method requests exact prices for available offerings. (required)
        :type price: float
        :param who_made: An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'. (required)
        :type who_made: str
        :param when_made: An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'. (required)
        :type when_made: str
        :param taxonomy_id: The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information. (required)
        :type taxonomy_id: int
        :param shipping_profile_id: The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
        :type shipping_profile_id: int
        :param return_policy_id: The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
        :type return_policy_id: int
        :param materials: A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
        :type materials: List[str]
        :param shop_section_id: The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
        :type shop_section_id: int
        :param processing_min: The minimum number of days required to process this listing. Default value is null.
        :type processing_min: int
        :param processing_max: The maximum number of days required to process this listing. Default value is null.
        :type processing_max: int
        :param tags: A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.
        :type tags: List[str]
        :param styles: An array of style strings for this listing, each of which is free-form text string such as \\\"Formal\\\", or \\\"Steampunk\\\". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
        :type styles: List[str]
        :param item_weight: The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_weight: float
        :param item_length: The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_length: float
        :param item_width: The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_width: float
        :param item_height: The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_height: float
        :param item_weight_unit: A string defining the units used to measure the weight of the product. Default value is null.
        :type item_weight_unit: str
        :param item_dimensions_unit: A string defining the units used to measure the dimensions of the product. Default value is null.
        :type item_dimensions_unit: str
        :param is_personalizable: When true, this listing is personalizable. The default value is null.
        :type is_personalizable: bool
        :param personalization_is_required: When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
        :type personalization_is_required: bool
        :param personalization_char_count_max: This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
        :type personalization_char_count_max: int
        :param personalization_instructions: A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
        :type personalization_instructions: str
        :param production_partner_ids: An array of unique IDs of production partner ids.
        :type production_partner_ids: List[int]
        :param image_ids: An array of numeric image IDs of the images in a listing, which can include up to 10 images.
        :type image_ids: List[int]
        :param is_supply: When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
        :type is_supply: bool
        :param is_customizable: When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.
        :type is_customizable: bool
        :param should_auto_renew: When true, renews a listing for four months upon expiration.
        :type should_auto_renew: bool
        :param is_taxable: When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
        :type is_taxable: bool
        :param type: An enumerated type string that indicates whether the listing is physical or a digital download.
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_draft_listing_serialize(
            shop_id=shop_id,
            quantity=quantity,
            title=title,
            description=description,
            price=price,
            who_made=who_made,
            when_made=when_made,
            taxonomy_id=taxonomy_id,
            shipping_profile_id=shipping_profile_id,
            return_policy_id=return_policy_id,
            materials=materials,
            shop_section_id=shop_section_id,
            processing_min=processing_min,
            processing_max=processing_max,
            tags=tags,
            styles=styles,
            item_weight=item_weight,
            item_length=item_length,
            item_width=item_width,
            item_height=item_height,
            item_weight_unit=item_weight_unit,
            item_dimensions_unit=item_dimensions_unit,
            is_personalizable=is_personalizable,
            personalization_is_required=personalization_is_required,
            personalization_char_count_max=personalization_char_count_max,
            personalization_instructions=personalization_instructions,
            production_partner_ids=production_partner_ids,
            image_ids=image_ids,
            is_supply=is_supply,
            is_customizable=is_customizable,
            should_auto_renew=should_auto_renew,
            is_taxable=is_taxable,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ShopListing",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_draft_listing_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        quantity: Annotated[StrictInt, Field(description="The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.")],
        title: Annotated[StrictStr, Field(description="The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.")],
        description: Annotated[StrictStr, Field(description="A description string of the product for sale in the listing.")],
        price: Annotated[Union[StrictFloat, StrictInt], Field(description="The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The [`getListingInventory`](/documentation/reference/#operation/getListingInventory) method requests exact prices for available offerings.")],
        who_made: Annotated[StrictStr, Field(description="An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.")],
        when_made: Annotated[StrictStr, Field(description="An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.")],
        taxonomy_id: Annotated[int, Field(strict=True, ge=1, description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")],
        shipping_profile_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.")] = None,
        return_policy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).")] = None,
        materials: Annotated[Optional[List[StrictStr]], Field(description="A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")] = None,
        shop_section_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.")] = None,
        processing_min: Annotated[Optional[StrictInt], Field(description="The minimum number of days required to process this listing. Default value is null.")] = None,
        processing_max: Annotated[Optional[StrictInt], Field(description="The maximum number of days required to process this listing. Default value is null.")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.")] = None,
        styles: Annotated[Optional[List[StrictStr]], Field(description="An array of style strings for this listing, each of which is free-form text string such as \\\"Formal\\\", or \\\"Steampunk\\\". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")] = None,
        item_weight: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_length: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_width: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_height: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_weight_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the weight of the product. Default value is null.")] = None,
        item_dimensions_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the dimensions of the product. Default value is null.")] = None,
        is_personalizable: Annotated[Optional[StrictBool], Field(description="When true, this listing is personalizable. The default value is null.")] = None,
        personalization_is_required: Annotated[Optional[StrictBool], Field(description="When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.")] = None,
        personalization_char_count_max: Annotated[Optional[StrictInt], Field(description="This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.")] = None,
        personalization_instructions: Annotated[Optional[StrictStr], Field(description="A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.")] = None,
        production_partner_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of unique IDs of production partner ids.")] = None,
        image_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of numeric image IDs of the images in a listing, which can include up to 10 images.")] = None,
        is_supply: Annotated[Optional[StrictBool], Field(description="When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.")] = None,
        is_customizable: Annotated[Optional[StrictBool], Field(description="When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.")] = None,
        should_auto_renew: Annotated[Optional[StrictBool], Field(description="When true, renews a listing for four months upon expiration.")] = None,
        is_taxable: Annotated[Optional[StrictBool], Field(description="When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="An enumerated type string that indicates whether the listing is physical or a digital download.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopListing]:
        """create_draft_listing

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Creates a physical draft [listing](/documentation/reference#tag/ShopListing) product in a shop on the Etsy channel.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param quantity: The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint. (required)
        :type quantity: int
        :param title: The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each. (required)
        :type title: str
        :param description: A description string of the product for sale in the listing. (required)
        :type description: str
        :param price: The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The [`getListingInventory`](/documentation/reference/#operation/getListingInventory) method requests exact prices for available offerings. (required)
        :type price: float
        :param who_made: An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'. (required)
        :type who_made: str
        :param when_made: An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'. (required)
        :type when_made: str
        :param taxonomy_id: The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information. (required)
        :type taxonomy_id: int
        :param shipping_profile_id: The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
        :type shipping_profile_id: int
        :param return_policy_id: The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
        :type return_policy_id: int
        :param materials: A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
        :type materials: List[str]
        :param shop_section_id: The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
        :type shop_section_id: int
        :param processing_min: The minimum number of days required to process this listing. Default value is null.
        :type processing_min: int
        :param processing_max: The maximum number of days required to process this listing. Default value is null.
        :type processing_max: int
        :param tags: A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.
        :type tags: List[str]
        :param styles: An array of style strings for this listing, each of which is free-form text string such as \\\"Formal\\\", or \\\"Steampunk\\\". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
        :type styles: List[str]
        :param item_weight: The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_weight: float
        :param item_length: The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_length: float
        :param item_width: The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_width: float
        :param item_height: The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_height: float
        :param item_weight_unit: A string defining the units used to measure the weight of the product. Default value is null.
        :type item_weight_unit: str
        :param item_dimensions_unit: A string defining the units used to measure the dimensions of the product. Default value is null.
        :type item_dimensions_unit: str
        :param is_personalizable: When true, this listing is personalizable. The default value is null.
        :type is_personalizable: bool
        :param personalization_is_required: When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
        :type personalization_is_required: bool
        :param personalization_char_count_max: This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
        :type personalization_char_count_max: int
        :param personalization_instructions: A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
        :type personalization_instructions: str
        :param production_partner_ids: An array of unique IDs of production partner ids.
        :type production_partner_ids: List[int]
        :param image_ids: An array of numeric image IDs of the images in a listing, which can include up to 10 images.
        :type image_ids: List[int]
        :param is_supply: When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
        :type is_supply: bool
        :param is_customizable: When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.
        :type is_customizable: bool
        :param should_auto_renew: When true, renews a listing for four months upon expiration.
        :type should_auto_renew: bool
        :param is_taxable: When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
        :type is_taxable: bool
        :param type: An enumerated type string that indicates whether the listing is physical or a digital download.
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_draft_listing_serialize(
            shop_id=shop_id,
            quantity=quantity,
            title=title,
            description=description,
            price=price,
            who_made=who_made,
            when_made=when_made,
            taxonomy_id=taxonomy_id,
            shipping_profile_id=shipping_profile_id,
            return_policy_id=return_policy_id,
            materials=materials,
            shop_section_id=shop_section_id,
            processing_min=processing_min,
            processing_max=processing_max,
            tags=tags,
            styles=styles,
            item_weight=item_weight,
            item_length=item_length,
            item_width=item_width,
            item_height=item_height,
            item_weight_unit=item_weight_unit,
            item_dimensions_unit=item_dimensions_unit,
            is_personalizable=is_personalizable,
            personalization_is_required=personalization_is_required,
            personalization_char_count_max=personalization_char_count_max,
            personalization_instructions=personalization_instructions,
            production_partner_ids=production_partner_ids,
            image_ids=image_ids,
            is_supply=is_supply,
            is_customizable=is_customizable,
            should_auto_renew=should_auto_renew,
            is_taxable=is_taxable,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ShopListing",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_draft_listing_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        quantity: Annotated[StrictInt, Field(description="The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.")],
        title: Annotated[StrictStr, Field(description="The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.")],
        description: Annotated[StrictStr, Field(description="A description string of the product for sale in the listing.")],
        price: Annotated[Union[StrictFloat, StrictInt], Field(description="The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The [`getListingInventory`](/documentation/reference/#operation/getListingInventory) method requests exact prices for available offerings.")],
        who_made: Annotated[StrictStr, Field(description="An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.")],
        when_made: Annotated[StrictStr, Field(description="An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.")],
        taxonomy_id: Annotated[int, Field(strict=True, ge=1, description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")],
        shipping_profile_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.")] = None,
        return_policy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).")] = None,
        materials: Annotated[Optional[List[StrictStr]], Field(description="A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")] = None,
        shop_section_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.")] = None,
        processing_min: Annotated[Optional[StrictInt], Field(description="The minimum number of days required to process this listing. Default value is null.")] = None,
        processing_max: Annotated[Optional[StrictInt], Field(description="The maximum number of days required to process this listing. Default value is null.")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.")] = None,
        styles: Annotated[Optional[List[StrictStr]], Field(description="An array of style strings for this listing, each of which is free-form text string such as \\\"Formal\\\", or \\\"Steampunk\\\". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")] = None,
        item_weight: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_length: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_width: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_height: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_weight_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the weight of the product. Default value is null.")] = None,
        item_dimensions_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the dimensions of the product. Default value is null.")] = None,
        is_personalizable: Annotated[Optional[StrictBool], Field(description="When true, this listing is personalizable. The default value is null.")] = None,
        personalization_is_required: Annotated[Optional[StrictBool], Field(description="When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.")] = None,
        personalization_char_count_max: Annotated[Optional[StrictInt], Field(description="This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.")] = None,
        personalization_instructions: Annotated[Optional[StrictStr], Field(description="A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.")] = None,
        production_partner_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of unique IDs of production partner ids.")] = None,
        image_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of numeric image IDs of the images in a listing, which can include up to 10 images.")] = None,
        is_supply: Annotated[Optional[StrictBool], Field(description="When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.")] = None,
        is_customizable: Annotated[Optional[StrictBool], Field(description="When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.")] = None,
        should_auto_renew: Annotated[Optional[StrictBool], Field(description="When true, renews a listing for four months upon expiration.")] = None,
        is_taxable: Annotated[Optional[StrictBool], Field(description="When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="An enumerated type string that indicates whether the listing is physical or a digital download.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_draft_listing

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Creates a physical draft [listing](/documentation/reference#tag/ShopListing) product in a shop on the Etsy channel.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param quantity: The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint. (required)
        :type quantity: int
        :param title: The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each. (required)
        :type title: str
        :param description: A description string of the product for sale in the listing. (required)
        :type description: str
        :param price: The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The [`getListingInventory`](/documentation/reference/#operation/getListingInventory) method requests exact prices for available offerings. (required)
        :type price: float
        :param who_made: An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'. (required)
        :type who_made: str
        :param when_made: An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'. (required)
        :type when_made: str
        :param taxonomy_id: The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information. (required)
        :type taxonomy_id: int
        :param shipping_profile_id: The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
        :type shipping_profile_id: int
        :param return_policy_id: The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
        :type return_policy_id: int
        :param materials: A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
        :type materials: List[str]
        :param shop_section_id: The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
        :type shop_section_id: int
        :param processing_min: The minimum number of days required to process this listing. Default value is null.
        :type processing_min: int
        :param processing_max: The maximum number of days required to process this listing. Default value is null.
        :type processing_max: int
        :param tags: A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.
        :type tags: List[str]
        :param styles: An array of style strings for this listing, each of which is free-form text string such as \\\"Formal\\\", or \\\"Steampunk\\\". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
        :type styles: List[str]
        :param item_weight: The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_weight: float
        :param item_length: The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_length: float
        :param item_width: The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_width: float
        :param item_height: The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_height: float
        :param item_weight_unit: A string defining the units used to measure the weight of the product. Default value is null.
        :type item_weight_unit: str
        :param item_dimensions_unit: A string defining the units used to measure the dimensions of the product. Default value is null.
        :type item_dimensions_unit: str
        :param is_personalizable: When true, this listing is personalizable. The default value is null.
        :type is_personalizable: bool
        :param personalization_is_required: When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
        :type personalization_is_required: bool
        :param personalization_char_count_max: This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
        :type personalization_char_count_max: int
        :param personalization_instructions: A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
        :type personalization_instructions: str
        :param production_partner_ids: An array of unique IDs of production partner ids.
        :type production_partner_ids: List[int]
        :param image_ids: An array of numeric image IDs of the images in a listing, which can include up to 10 images.
        :type image_ids: List[int]
        :param is_supply: When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
        :type is_supply: bool
        :param is_customizable: When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.
        :type is_customizable: bool
        :param should_auto_renew: When true, renews a listing for four months upon expiration.
        :type should_auto_renew: bool
        :param is_taxable: When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
        :type is_taxable: bool
        :param type: An enumerated type string that indicates whether the listing is physical or a digital download.
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_draft_listing_serialize(
            shop_id=shop_id,
            quantity=quantity,
            title=title,
            description=description,
            price=price,
            who_made=who_made,
            when_made=when_made,
            taxonomy_id=taxonomy_id,
            shipping_profile_id=shipping_profile_id,
            return_policy_id=return_policy_id,
            materials=materials,
            shop_section_id=shop_section_id,
            processing_min=processing_min,
            processing_max=processing_max,
            tags=tags,
            styles=styles,
            item_weight=item_weight,
            item_length=item_length,
            item_width=item_width,
            item_height=item_height,
            item_weight_unit=item_weight_unit,
            item_dimensions_unit=item_dimensions_unit,
            is_personalizable=is_personalizable,
            personalization_is_required=personalization_is_required,
            personalization_char_count_max=personalization_char_count_max,
            personalization_instructions=personalization_instructions,
            production_partner_ids=production_partner_ids,
            image_ids=image_ids,
            is_supply=is_supply,
            is_customizable=is_customizable,
            should_auto_renew=should_auto_renew,
            is_taxable=is_taxable,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ShopListing",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_draft_listing_serialize(
        self,
        shop_id,
        quantity,
        title,
        description,
        price,
        who_made,
        when_made,
        taxonomy_id,
        shipping_profile_id,
        return_policy_id,
        materials,
        shop_section_id,
        processing_min,
        processing_max,
        tags,
        styles,
        item_weight,
        item_length,
        item_width,
        item_height,
        item_weight_unit,
        item_dimensions_unit,
        is_personalizable,
        personalization_is_required,
        personalization_char_count_max,
        personalization_instructions,
        production_partner_ids,
        image_ids,
        is_supply,
        is_customizable,
        should_auto_renew,
        is_taxable,
        type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'materials': 'csv',
            'tags': 'csv',
            'styles': 'csv',
            'production_partner_ids': 'csv',
            'image_ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if quantity is not None:
            _form_params.append(('quantity', quantity))
        if title is not None:
            _form_params.append(('title', title))
        if description is not None:
            _form_params.append(('description', description))
        if price is not None:
            _form_params.append(('price', price))
        if who_made is not None:
            _form_params.append(('who_made', who_made))
        if when_made is not None:
            _form_params.append(('when_made', when_made))
        if taxonomy_id is not None:
            _form_params.append(('taxonomy_id', taxonomy_id))
        if shipping_profile_id is not None:
            _form_params.append(('shipping_profile_id', shipping_profile_id))
        if return_policy_id is not None:
            _form_params.append(('return_policy_id', return_policy_id))
        if materials is not None:
            _form_params.append(('materials', materials))
        if shop_section_id is not None:
            _form_params.append(('shop_section_id', shop_section_id))
        if processing_min is not None:
            _form_params.append(('processing_min', processing_min))
        if processing_max is not None:
            _form_params.append(('processing_max', processing_max))
        if tags is not None:
            _form_params.append(('tags', tags))
        if styles is not None:
            _form_params.append(('styles', styles))
        if item_weight is not None:
            _form_params.append(('item_weight', item_weight))
        if item_length is not None:
            _form_params.append(('item_length', item_length))
        if item_width is not None:
            _form_params.append(('item_width', item_width))
        if item_height is not None:
            _form_params.append(('item_height', item_height))
        if item_weight_unit is not None:
            _form_params.append(('item_weight_unit', item_weight_unit))
        if item_dimensions_unit is not None:
            _form_params.append(('item_dimensions_unit', item_dimensions_unit))
        if is_personalizable is not None:
            _form_params.append(('is_personalizable', is_personalizable))
        if personalization_is_required is not None:
            _form_params.append(('personalization_is_required', personalization_is_required))
        if personalization_char_count_max is not None:
            _form_params.append(('personalization_char_count_max', personalization_char_count_max))
        if personalization_instructions is not None:
            _form_params.append(('personalization_instructions', personalization_instructions))
        if production_partner_ids is not None:
            _form_params.append(('production_partner_ids', production_partner_ids))
        if image_ids is not None:
            _form_params.append(('image_ids', image_ids))
        if is_supply is not None:
            _form_params.append(('is_supply', is_supply))
        if is_customizable is not None:
            _form_params.append(('is_customizable', is_customizable))
        if should_auto_renew is not None:
            _form_params.append(('should_auto_renew', should_auto_renew))
        if is_taxable is not None:
            _form_params.append(('is_taxable', is_taxable))
        if type is not None:
            _form_params.append(('type', type))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v3/application/shops/{shop_id}/listings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_listing(
        self,
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_listing

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Open API V3 endpoint to delete a ShopListing. A ShopListing can be deleted only if the state is one of the following:  SOLD_OUT, DRAFT, EXPIRED, INACTIVE, ACTIVE and is_available or ACTIVE and has seller flags:  SUPRESSED (frozen), VACATION, CUSTOM_SHOPS (pattern), SELL_ON_FACEBOOK

        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_listing_serialize(
            listing_id=listing_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': "ErrorSchema",
            '409': "ErrorSchema",
            '204': None,
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_listing_with_http_info(
        self,
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_listing

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Open API V3 endpoint to delete a ShopListing. A ShopListing can be deleted only if the state is one of the following:  SOLD_OUT, DRAFT, EXPIRED, INACTIVE, ACTIVE and is_available or ACTIVE and has seller flags:  SUPRESSED (frozen), VACATION, CUSTOM_SHOPS (pattern), SELL_ON_FACEBOOK

        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_listing_serialize(
            listing_id=listing_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': "ErrorSchema",
            '409': "ErrorSchema",
            '204': None,
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_listing_without_preload_content(
        self,
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_listing

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Open API V3 endpoint to delete a ShopListing. A ShopListing can be deleted only if the state is one of the following:  SOLD_OUT, DRAFT, EXPIRED, INACTIVE, ACTIVE and is_available or ACTIVE and has seller flags:  SUPRESSED (frozen), VACATION, CUSTOM_SHOPS (pattern), SELL_ON_FACEBOOK

        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_listing_serialize(
            listing_id=listing_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': "ErrorSchema",
            '409': "ErrorSchema",
            '204': None,
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_listing_serialize(
        self,
        listing_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if listing_id is not None:
            _path_params['listing_id'] = listing_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v3/application/listings/{listing_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_listing_property(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        property_id: Annotated[int, Field(strict=True, ge=1, description="The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_listing_property

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Deletes a property for a Listing.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param property_id: The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
        :type property_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_listing_property_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_listing_property_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        property_id: Annotated[int, Field(strict=True, ge=1, description="The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_listing_property

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Deletes a property for a Listing.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param property_id: The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
        :type property_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_listing_property_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_listing_property_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        property_id: Annotated[int, Field(strict=True, ge=1, description="The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_listing_property

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Deletes a property for a Listing.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param property_id: The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
        :type property_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_listing_property_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_listing_property_serialize(
        self,
        shop_id,
        listing_id,
        property_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        if listing_id is not None:
            _path_params['listing_id'] = listing_id
        if property_id is not None:
            _path_params['property_id'] = property_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v3/application/shops/{shop_id}/listings/{listing_id}/properties/{property_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_all_active_listings_by_shop(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        keywords: Annotated[Optional[StrictStr], Field(description="Search term or phrase that must appear in all results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopListings:
        """find_all_active_listings_by_shop

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves a list of all active listings on Etsy in a specific shop, paginated by listing creation date.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param limit: The maximum number of results to return.
        :type limit: int
        :param sort_on: The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
        :type sort_order: str
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param keywords: Search term or phrase that must appear in all results.
        :type keywords: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_all_active_listings_by_shop_serialize(
            shop_id=shop_id,
            limit=limit,
            sort_on=sort_on,
            sort_order=sort_order,
            offset=offset,
            keywords=keywords,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_all_active_listings_by_shop_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        keywords: Annotated[Optional[StrictStr], Field(description="Search term or phrase that must appear in all results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopListings]:
        """find_all_active_listings_by_shop

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves a list of all active listings on Etsy in a specific shop, paginated by listing creation date.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param limit: The maximum number of results to return.
        :type limit: int
        :param sort_on: The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
        :type sort_order: str
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param keywords: Search term or phrase that must appear in all results.
        :type keywords: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_all_active_listings_by_shop_serialize(
            shop_id=shop_id,
            limit=limit,
            sort_on=sort_on,
            sort_order=sort_order,
            offset=offset,
            keywords=keywords,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_all_active_listings_by_shop_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        keywords: Annotated[Optional[StrictStr], Field(description="Search term or phrase that must appear in all results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """find_all_active_listings_by_shop

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves a list of all active listings on Etsy in a specific shop, paginated by listing creation date.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param limit: The maximum number of results to return.
        :type limit: int
        :param sort_on: The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
        :type sort_order: str
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param keywords: Search term or phrase that must appear in all results.
        :type keywords: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_all_active_listings_by_shop_serialize(
            shop_id=shop_id,
            limit=limit,
            sort_on=sort_on,
            sort_order=sort_order,
            offset=offset,
            keywords=keywords,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_all_active_listings_by_shop_serialize(
        self,
        shop_id,
        limit,
        sort_on,
        sort_order,
        offset,
        keywords,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort_on is not None:
            
            _query_params.append(('sort_on', sort_on))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if keywords is not None:
            
            _query_params.append(('keywords', keywords))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/shops/{shop_id}/listings/active',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_all_listings_active(
        self,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        keywords: Annotated[Optional[StrictStr], Field(description="Search term or phrase that must appear in all results.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).")] = None,
        min_price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum price of listings to be returned by a search result.")] = None,
        max_price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum price of listings to be returned by a search result.")] = None,
        taxonomy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")] = None,
        shop_location: Annotated[Optional[StrictStr], Field(description="Filters by shop location. If location cannot be parsed, Etsy responds with an error.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopListings:
        """find_all_listings_active

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  A list of all active listings on Etsy paginated by their creation date. Without sort_order listings will be returned newest-first by default.

        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param keywords: Search term or phrase that must appear in all results.
        :type keywords: str
        :param sort_on: The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
        :type sort_order: str
        :param min_price: The minimum price of listings to be returned by a search result.
        :type min_price: float
        :param max_price: The maximum price of listings to be returned by a search result.
        :type max_price: float
        :param taxonomy_id: The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
        :type taxonomy_id: int
        :param shop_location: Filters by shop location. If location cannot be parsed, Etsy responds with an error.
        :type shop_location: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_all_listings_active_serialize(
            limit=limit,
            offset=offset,
            keywords=keywords,
            sort_on=sort_on,
            sort_order=sort_order,
            min_price=min_price,
            max_price=max_price,
            taxonomy_id=taxonomy_id,
            shop_location=shop_location,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_all_listings_active_with_http_info(
        self,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        keywords: Annotated[Optional[StrictStr], Field(description="Search term or phrase that must appear in all results.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).")] = None,
        min_price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum price of listings to be returned by a search result.")] = None,
        max_price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum price of listings to be returned by a search result.")] = None,
        taxonomy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")] = None,
        shop_location: Annotated[Optional[StrictStr], Field(description="Filters by shop location. If location cannot be parsed, Etsy responds with an error.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopListings]:
        """find_all_listings_active

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  A list of all active listings on Etsy paginated by their creation date. Without sort_order listings will be returned newest-first by default.

        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param keywords: Search term or phrase that must appear in all results.
        :type keywords: str
        :param sort_on: The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
        :type sort_order: str
        :param min_price: The minimum price of listings to be returned by a search result.
        :type min_price: float
        :param max_price: The maximum price of listings to be returned by a search result.
        :type max_price: float
        :param taxonomy_id: The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
        :type taxonomy_id: int
        :param shop_location: Filters by shop location. If location cannot be parsed, Etsy responds with an error.
        :type shop_location: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_all_listings_active_serialize(
            limit=limit,
            offset=offset,
            keywords=keywords,
            sort_on=sort_on,
            sort_order=sort_order,
            min_price=min_price,
            max_price=max_price,
            taxonomy_id=taxonomy_id,
            shop_location=shop_location,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_all_listings_active_without_preload_content(
        self,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        keywords: Annotated[Optional[StrictStr], Field(description="Search term or phrase that must appear in all results.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).")] = None,
        min_price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The minimum price of listings to be returned by a search result.")] = None,
        max_price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum price of listings to be returned by a search result.")] = None,
        taxonomy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")] = None,
        shop_location: Annotated[Optional[StrictStr], Field(description="Filters by shop location. If location cannot be parsed, Etsy responds with an error.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """find_all_listings_active

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  A list of all active listings on Etsy paginated by their creation date. Without sort_order listings will be returned newest-first by default.

        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param keywords: Search term or phrase that must appear in all results.
        :type keywords: str
        :param sort_on: The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
        :type sort_order: str
        :param min_price: The minimum price of listings to be returned by a search result.
        :type min_price: float
        :param max_price: The maximum price of listings to be returned by a search result.
        :type max_price: float
        :param taxonomy_id: The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
        :type taxonomy_id: int
        :param shop_location: Filters by shop location. If location cannot be parsed, Etsy responds with an error.
        :type shop_location: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_all_listings_active_serialize(
            limit=limit,
            offset=offset,
            keywords=keywords,
            sort_on=sort_on,
            sort_order=sort_order,
            min_price=min_price,
            max_price=max_price,
            taxonomy_id=taxonomy_id,
            shop_location=shop_location,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_all_listings_active_serialize(
        self,
        limit,
        offset,
        keywords,
        sort_on,
        sort_order,
        min_price,
        max_price,
        taxonomy_id,
        shop_location,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if keywords is not None:
            
            _query_params.append(('keywords', keywords))
            
        if sort_on is not None:
            
            _query_params.append(('sort_on', sort_on))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if min_price is not None:
            
            _query_params.append(('min_price', min_price))
            
        if max_price is not None:
            
            _query_params.append(('max_price', max_price))
            
        if taxonomy_id is not None:
            
            _query_params.append(('taxonomy_id', taxonomy_id))
            
        if shop_location is not None:
            
            _query_params.append(('shop_location', shop_location))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/listings/active',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_featured_listings_by_shop(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopListings:
        """get_featured_listings_by_shop

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves Listings associated to a Shop that are featured.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_featured_listings_by_shop_serialize(
            shop_id=shop_id,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '400': "ErrorSchema",
            '403': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_featured_listings_by_shop_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopListings]:
        """get_featured_listings_by_shop

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves Listings associated to a Shop that are featured.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_featured_listings_by_shop_serialize(
            shop_id=shop_id,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '400': "ErrorSchema",
            '403': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_featured_listings_by_shop_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_featured_listings_by_shop

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves Listings associated to a Shop that are featured.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_featured_listings_by_shop_serialize(
            shop_id=shop_id,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '400': "ErrorSchema",
            '403': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_featured_listings_by_shop_serialize(
        self,
        shop_id,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/shops/{shop_id}/listings/featured',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_listing(
        self,
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        includes: Annotated[Optional[List[StrictStr]], Field(description="An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The IETF language tag for the language of this translation. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopListingWithAssociations:
        """get_listing

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves a listing record by listing ID.

        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param includes: An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.
        :type includes: List[str]
        :param language: The IETF language tag for the language of this translation. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_serialize(
            listing_id=listing_id,
            includes=includes,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListingWithAssociations",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listing_with_http_info(
        self,
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        includes: Annotated[Optional[List[StrictStr]], Field(description="An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The IETF language tag for the language of this translation. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopListingWithAssociations]:
        """get_listing

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves a listing record by listing ID.

        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param includes: An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.
        :type includes: List[str]
        :param language: The IETF language tag for the language of this translation. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_serialize(
            listing_id=listing_id,
            includes=includes,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListingWithAssociations",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listing_without_preload_content(
        self,
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        includes: Annotated[Optional[List[StrictStr]], Field(description="An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The IETF language tag for the language of this translation. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_listing

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves a listing record by listing ID.

        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param includes: An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.
        :type includes: List[str]
        :param language: The IETF language tag for the language of this translation. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_serialize(
            listing_id=listing_id,
            includes=includes,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListingWithAssociations",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listing_serialize(
        self,
        listing_id,
        includes,
        language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'includes': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if listing_id is not None:
            _path_params['listing_id'] = listing_id
        # process the query parameters
        if includes is not None:
            
            _query_params.append(('includes', includes))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/listings/{listing_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_listing_properties(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListingPropertyValues:
        """get_listing_properties

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Get a listing's properties

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_properties_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingPropertyValues",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listing_properties_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListingPropertyValues]:
        """get_listing_properties

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Get a listing's properties

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_properties_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingPropertyValues",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listing_properties_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_listing_properties

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Get a listing's properties

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_properties_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingPropertyValues",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listing_properties_serialize(
        self,
        shop_id,
        listing_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        if listing_id is not None:
            _path_params['listing_id'] = listing_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/shops/{shop_id}/listings/{listing_id}/properties',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_listing_property(
        self,
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        property_id: Annotated[int, Field(strict=True, ge=1, description="The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListingPropertyValue:
        """get_listing_property

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationTertiary wt-mr-xs-2\"> Feedback only </span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Give feedback</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">Development for this endpoint is in progress. It will only return a 501 response.</p></div>  Retrieves a listing's property

        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param property_id: The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
        :type property_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_property_serialize(
            listing_id=listing_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingPropertyValue",
            '404': "ErrorSchema",
            '501': "ErrorSchema",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listing_property_with_http_info(
        self,
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        property_id: Annotated[int, Field(strict=True, ge=1, description="The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListingPropertyValue]:
        """get_listing_property

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationTertiary wt-mr-xs-2\"> Feedback only </span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Give feedback</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">Development for this endpoint is in progress. It will only return a 501 response.</p></div>  Retrieves a listing's property

        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param property_id: The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
        :type property_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_property_serialize(
            listing_id=listing_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingPropertyValue",
            '404': "ErrorSchema",
            '501': "ErrorSchema",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listing_property_without_preload_content(
        self,
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        property_id: Annotated[int, Field(strict=True, ge=1, description="The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_listing_property

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationTertiary wt-mr-xs-2\"> Feedback only </span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Give feedback</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">Development for this endpoint is in progress. It will only return a 501 response.</p></div>  Retrieves a listing's property

        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param property_id: The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
        :type property_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listing_property_serialize(
            listing_id=listing_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingPropertyValue",
            '404': "ErrorSchema",
            '501': "ErrorSchema",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listing_property_serialize(
        self,
        listing_id,
        property_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if listing_id is not None:
            _path_params['listing_id'] = listing_id
        if property_id is not None:
            _path_params['property_id'] = property_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/listings/{listing_id}/properties/{property_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_listings_by_listing_ids(
        self,
        listing_ids: Annotated[List[Annotated[int, Field(strict=True, ge=1)]], Field(description="The list of numeric IDS for the listings in a specific Etsy shop.")],
        includes: Annotated[Optional[List[StrictStr]], Field(description="An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopListingsWithAssociations:
        """get_listings_by_listing_ids

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Allows to query multiple listing ids at once. Limit 100 ids maximum per query.

        :param listing_ids: The list of numeric IDS for the listings in a specific Etsy shop. (required)
        :type listing_ids: List[int]
        :param includes: An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.
        :type includes: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_listing_ids_serialize(
            listing_ids=listing_ids,
            includes=includes,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListingsWithAssociations",
            '400': "ErrorSchema",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listings_by_listing_ids_with_http_info(
        self,
        listing_ids: Annotated[List[Annotated[int, Field(strict=True, ge=1)]], Field(description="The list of numeric IDS for the listings in a specific Etsy shop.")],
        includes: Annotated[Optional[List[StrictStr]], Field(description="An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopListingsWithAssociations]:
        """get_listings_by_listing_ids

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Allows to query multiple listing ids at once. Limit 100 ids maximum per query.

        :param listing_ids: The list of numeric IDS for the listings in a specific Etsy shop. (required)
        :type listing_ids: List[int]
        :param includes: An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.
        :type includes: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_listing_ids_serialize(
            listing_ids=listing_ids,
            includes=includes,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListingsWithAssociations",
            '400': "ErrorSchema",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listings_by_listing_ids_without_preload_content(
        self,
        listing_ids: Annotated[List[Annotated[int, Field(strict=True, ge=1)]], Field(description="The list of numeric IDS for the listings in a specific Etsy shop.")],
        includes: Annotated[Optional[List[StrictStr]], Field(description="An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_listings_by_listing_ids

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Allows to query multiple listing ids at once. Limit 100 ids maximum per query.

        :param listing_ids: The list of numeric IDS for the listings in a specific Etsy shop. (required)
        :type listing_ids: List[int]
        :param includes: An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.
        :type includes: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_listing_ids_serialize(
            listing_ids=listing_ids,
            includes=includes,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListingsWithAssociations",
            '400': "ErrorSchema",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listings_by_listing_ids_serialize(
        self,
        listing_ids,
        includes,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'listing_ids': 'multi',
            'includes': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if listing_ids is not None:
            
            _query_params.append(('listing_ids', listing_ids))
            
        if includes is not None:
            
            _query_params.append(('includes', includes))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/listings/batch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_listings_by_shop(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        state: Annotated[Optional[StrictStr], Field(description="When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).")] = None,
        includes: Annotated[Optional[List[StrictStr]], Field(description="An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopListingsWithAssociations:
        """get_listings_by_shop

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Endpoint to list Listings that belong to a Shop. Listings can be filtered using the 'state' param.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param state: When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
        :type state: str
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param sort_on: The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
        :type sort_order: str
        :param includes: An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.
        :type includes: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_shop_serialize(
            shop_id=shop_id,
            state=state,
            limit=limit,
            offset=offset,
            sort_on=sort_on,
            sort_order=sort_order,
            includes=includes,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListingsWithAssociations",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '403': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listings_by_shop_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        state: Annotated[Optional[StrictStr], Field(description="When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).")] = None,
        includes: Annotated[Optional[List[StrictStr]], Field(description="An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopListingsWithAssociations]:
        """get_listings_by_shop

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Endpoint to list Listings that belong to a Shop. Listings can be filtered using the 'state' param.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param state: When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
        :type state: str
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param sort_on: The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
        :type sort_order: str
        :param includes: An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.
        :type includes: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_shop_serialize(
            shop_id=shop_id,
            state=state,
            limit=limit,
            offset=offset,
            sort_on=sort_on,
            sort_order=sort_order,
            includes=includes,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListingsWithAssociations",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '403': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listings_by_shop_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        state: Annotated[Optional[StrictStr], Field(description="When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).")] = None,
        includes: Annotated[Optional[List[StrictStr]], Field(description="An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_listings_by_shop

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Endpoint to list Listings that belong to a Shop. Listings can be filtered using the 'state' param.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param state: When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
        :type state: str
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param sort_on: The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
        :type sort_order: str
        :param includes: An enumerated string that attaches a valid association. Acceptable inputs are 'Shipping', 'Shop', 'Images', 'User', 'Translations' and 'Inventory'.
        :type includes: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_shop_serialize(
            shop_id=shop_id,
            state=state,
            limit=limit,
            offset=offset,
            sort_on=sort_on,
            sort_order=sort_order,
            includes=includes,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListingsWithAssociations",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '403': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listings_by_shop_serialize(
        self,
        shop_id,
        state,
        limit,
        offset,
        sort_on,
        sort_order,
        includes,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'includes': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        # process the query parameters
        if state is not None:
            
            _query_params.append(('state', state))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_on is not None:
            
            _query_params.append(('sort_on', sort_on))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if includes is not None:
            
            _query_params.append(('includes', includes))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/shops/{shop_id}/listings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_listings_by_shop_receipt(
        self,
        receipt_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.")],
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopListings:
        """get_listings_by_shop_receipt

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Gets all listings associated with a receipt.

        :param receipt_id: The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
        :type receipt_id: int
        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_shop_receipt_serialize(
            receipt_id=receipt_id,
            shop_id=shop_id,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '400': "ErrorSchema",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listings_by_shop_receipt_with_http_info(
        self,
        receipt_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.")],
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopListings]:
        """get_listings_by_shop_receipt

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Gets all listings associated with a receipt.

        :param receipt_id: The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
        :type receipt_id: int
        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_shop_receipt_serialize(
            receipt_id=receipt_id,
            shop_id=shop_id,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '400': "ErrorSchema",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listings_by_shop_receipt_without_preload_content(
        self,
        receipt_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.")],
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_listings_by_shop_receipt

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Gets all listings associated with a receipt.

        :param receipt_id: The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
        :type receipt_id: int
        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_shop_receipt_serialize(
            receipt_id=receipt_id,
            shop_id=shop_id,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '400': "ErrorSchema",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listings_by_shop_receipt_serialize(
        self,
        receipt_id,
        shop_id,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if receipt_id is not None:
            _path_params['receipt_id'] = receipt_id
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/shops/{shop_id}/receipts/{receipt_id}/listings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_listings_by_shop_return_policy(
        self,
        return_policy_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).")],
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopListings:
        """get_listings_by_shop_return_policy

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Gets all listings associated with a Return Policy.

        :param return_policy_id: The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). (required)
        :type return_policy_id: int
        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_shop_return_policy_serialize(
            return_policy_id=return_policy_id,
            shop_id=shop_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '400': "ErrorSchema",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listings_by_shop_return_policy_with_http_info(
        self,
        return_policy_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).")],
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopListings]:
        """get_listings_by_shop_return_policy

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Gets all listings associated with a Return Policy.

        :param return_policy_id: The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). (required)
        :type return_policy_id: int
        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_shop_return_policy_serialize(
            return_policy_id=return_policy_id,
            shop_id=shop_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '400': "ErrorSchema",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listings_by_shop_return_policy_without_preload_content(
        self,
        return_policy_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).")],
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_listings_by_shop_return_policy

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Gets all listings associated with a Return Policy.

        :param return_policy_id: The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). (required)
        :type return_policy_id: int
        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_shop_return_policy_serialize(
            return_policy_id=return_policy_id,
            shop_id=shop_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '400': "ErrorSchema",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listings_by_shop_return_policy_serialize(
        self,
        return_policy_id,
        shop_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if return_policy_id is not None:
            _path_params['return_policy_id'] = return_policy_id
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/shops/{shop_id}/policies/return/{return_policy_id}/listings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_listings_by_shop_section_id(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        shop_section_ids: Annotated[List[Annotated[int, Field(strict=True, ge=1)]], Field(description="A list of numeric IDS for all sections in a specific Etsy shop.")],
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopListings:
        """get_listings_by_shop_section_id

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves all the listings from the section of a specific shop.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param shop_section_ids: A list of numeric IDS for all sections in a specific Etsy shop. (required)
        :type shop_section_ids: List[int]
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param sort_on: The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_shop_section_id_serialize(
            shop_id=shop_id,
            shop_section_ids=shop_section_ids,
            limit=limit,
            offset=offset,
            sort_on=sort_on,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_listings_by_shop_section_id_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        shop_section_ids: Annotated[List[Annotated[int, Field(strict=True, ge=1)]], Field(description="A list of numeric IDS for all sections in a specific Etsy shop.")],
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopListings]:
        """get_listings_by_shop_section_id

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves all the listings from the section of a specific shop.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param shop_section_ids: A list of numeric IDS for all sections in a specific Etsy shop. (required)
        :type shop_section_ids: List[int]
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param sort_on: The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_shop_section_id_serialize(
            shop_id=shop_id,
            shop_section_ids=shop_section_ids,
            limit=limit,
            offset=offset,
            sort_on=sort_on,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_listings_by_shop_section_id_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        shop_section_ids: Annotated[List[Annotated[int, Field(strict=True, ge=1)]], Field(description="A list of numeric IDS for all sections in a specific Etsy shop.")],
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_listings_by_shop_section_id

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves all the listings from the section of a specific shop.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param shop_section_ids: A list of numeric IDS for all sections in a specific Etsy shop. (required)
        :type shop_section_ids: List[int]
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param sort_on: The value to sort a search result of listings on. NOTES: a) `sort_on` only works when combined with one of the search options (keywords, region, etc.). b) when using `score` the returned results will always be in _descending_ order, regardless of the `sort_order` parameter.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.).
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_listings_by_shop_section_id_serialize(
            shop_id=shop_id,
            shop_section_ids=shop_section_ids,
            limit=limit,
            offset=offset,
            sort_on=sort_on,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListings",
            '400': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_listings_by_shop_section_id_serialize(
        self,
        shop_id,
        shop_section_ids,
        limit,
        offset,
        sort_on,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'shop_section_ids': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        # process the query parameters
        if shop_section_ids is not None:
            
            _query_params.append(('shop_section_ids', shop_section_ids))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_on is not None:
            
            _query_params.append(('sort_on', sort_on))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/shops/{shop_id}/shop-sections/listings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_listing(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        image_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of numeric image IDs of the images in a listing, which can include up to 10 images.")] = None,
        title: Annotated[Optional[StrictStr], Field(description="The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="A description string of the product for sale in the listing.")] = None,
        materials: Annotated[Optional[List[StrictStr]], Field(description="A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")] = None,
        should_auto_renew: Annotated[Optional[StrictBool], Field(description="When true, renews a listing for four months upon expiration.")] = None,
        shipping_profile_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.")] = None,
        return_policy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). Required for active physical listings. This requirement does not apply to listings of EU-based shops.")] = None,
        shop_section_id: Annotated[Optional[StrictInt], Field(description="The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.")] = None,
        item_weight: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_length: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_width: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_height: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_weight_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the weight of the product. Default value is null.")] = None,
        item_dimensions_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the dimensions of the product. Default value is null.")] = None,
        is_taxable: Annotated[Optional[StrictBool], Field(description="When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.")] = None,
        taxonomy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.")] = None,
        who_made: Annotated[Optional[StrictStr], Field(description="An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.")] = None,
        when_made: Annotated[Optional[StrictStr], Field(description="An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.")] = None,
        featured_rank: Annotated[Optional[StrictInt], Field(description="The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.")] = None,
        is_personalizable: Annotated[Optional[StrictBool], Field(description="When true, this listing is personalizable. The default value is null.")] = None,
        personalization_is_required: Annotated[Optional[StrictBool], Field(description="When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.")] = None,
        personalization_char_count_max: Annotated[Optional[StrictInt], Field(description="This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.")] = None,
        personalization_instructions: Annotated[Optional[StrictStr], Field(description="A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.")] = None,
        is_supply: Annotated[Optional[StrictBool], Field(description="When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.")] = None,
        production_partner_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of unique IDs of production partner ids.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="An enumerated type string that indicates whether the listing is physical or a digital download.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopListing:
        """update_listing

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Updates a listing, identified by a listing ID, for a specific shop identified by a shop ID. Note that this is a PATCH method type. When activating, or manually renewing a physical listing, the shipping profile referenced by the `shipping_profile_id`, and all of its fields, along with its entries and upgrades must be complete and valid. If the shipping profile is not complete and valid, we will throw an exception with an error message that guides the request sender to update whatever data is bad.  Draft digital listings that are not made to order must have a file upload associated with it to be activated. If the listing is made to order, the file upload is not required.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param image_ids: An array of numeric image IDs of the images in a listing, which can include up to 10 images.
        :type image_ids: List[int]
        :param title: The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
        :type title: str
        :param description: A description string of the product for sale in the listing.
        :type description: str
        :param materials: A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
        :type materials: List[str]
        :param should_auto_renew: When true, renews a listing for four months upon expiration.
        :type should_auto_renew: bool
        :param shipping_profile_id: The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
        :type shipping_profile_id: int
        :param return_policy_id: The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). Required for active physical listings. This requirement does not apply to listings of EU-based shops.
        :type return_policy_id: int
        :param shop_section_id: The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
        :type shop_section_id: int
        :param item_weight: The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_weight: float
        :param item_length: The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_length: float
        :param item_width: The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_width: float
        :param item_height: The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_height: float
        :param item_weight_unit: A string defining the units used to measure the weight of the product. Default value is null.
        :type item_weight_unit: str
        :param item_dimensions_unit: A string defining the units used to measure the dimensions of the product. Default value is null.
        :type item_dimensions_unit: str
        :param is_taxable: When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
        :type is_taxable: bool
        :param taxonomy_id: The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
        :type taxonomy_id: int
        :param tags: A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.
        :type tags: List[str]
        :param who_made: An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
        :type who_made: str
        :param when_made: An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
        :type when_made: str
        :param featured_rank: The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
        :type featured_rank: int
        :param is_personalizable: When true, this listing is personalizable. The default value is null.
        :type is_personalizable: bool
        :param personalization_is_required: When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
        :type personalization_is_required: bool
        :param personalization_char_count_max: This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
        :type personalization_char_count_max: int
        :param personalization_instructions: A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
        :type personalization_instructions: str
        :param state: When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
        :type state: str
        :param is_supply: When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
        :type is_supply: bool
        :param production_partner_ids: An array of unique IDs of production partner ids.
        :type production_partner_ids: List[int]
        :param type: An enumerated type string that indicates whether the listing is physical or a digital download.
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_listing_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            image_ids=image_ids,
            title=title,
            description=description,
            materials=materials,
            should_auto_renew=should_auto_renew,
            shipping_profile_id=shipping_profile_id,
            return_policy_id=return_policy_id,
            shop_section_id=shop_section_id,
            item_weight=item_weight,
            item_length=item_length,
            item_width=item_width,
            item_height=item_height,
            item_weight_unit=item_weight_unit,
            item_dimensions_unit=item_dimensions_unit,
            is_taxable=is_taxable,
            taxonomy_id=taxonomy_id,
            tags=tags,
            who_made=who_made,
            when_made=when_made,
            featured_rank=featured_rank,
            is_personalizable=is_personalizable,
            personalization_is_required=personalization_is_required,
            personalization_char_count_max=personalization_char_count_max,
            personalization_instructions=personalization_instructions,
            state=state,
            is_supply=is_supply,
            production_partner_ids=production_partner_ids,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListing",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '403': "ErrorSchema",
            '409': "ErrorSchema",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_listing_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        image_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of numeric image IDs of the images in a listing, which can include up to 10 images.")] = None,
        title: Annotated[Optional[StrictStr], Field(description="The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="A description string of the product for sale in the listing.")] = None,
        materials: Annotated[Optional[List[StrictStr]], Field(description="A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")] = None,
        should_auto_renew: Annotated[Optional[StrictBool], Field(description="When true, renews a listing for four months upon expiration.")] = None,
        shipping_profile_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.")] = None,
        return_policy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). Required for active physical listings. This requirement does not apply to listings of EU-based shops.")] = None,
        shop_section_id: Annotated[Optional[StrictInt], Field(description="The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.")] = None,
        item_weight: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_length: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_width: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_height: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_weight_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the weight of the product. Default value is null.")] = None,
        item_dimensions_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the dimensions of the product. Default value is null.")] = None,
        is_taxable: Annotated[Optional[StrictBool], Field(description="When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.")] = None,
        taxonomy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.")] = None,
        who_made: Annotated[Optional[StrictStr], Field(description="An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.")] = None,
        when_made: Annotated[Optional[StrictStr], Field(description="An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.")] = None,
        featured_rank: Annotated[Optional[StrictInt], Field(description="The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.")] = None,
        is_personalizable: Annotated[Optional[StrictBool], Field(description="When true, this listing is personalizable. The default value is null.")] = None,
        personalization_is_required: Annotated[Optional[StrictBool], Field(description="When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.")] = None,
        personalization_char_count_max: Annotated[Optional[StrictInt], Field(description="This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.")] = None,
        personalization_instructions: Annotated[Optional[StrictStr], Field(description="A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.")] = None,
        is_supply: Annotated[Optional[StrictBool], Field(description="When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.")] = None,
        production_partner_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of unique IDs of production partner ids.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="An enumerated type string that indicates whether the listing is physical or a digital download.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopListing]:
        """update_listing

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Updates a listing, identified by a listing ID, for a specific shop identified by a shop ID. Note that this is a PATCH method type. When activating, or manually renewing a physical listing, the shipping profile referenced by the `shipping_profile_id`, and all of its fields, along with its entries and upgrades must be complete and valid. If the shipping profile is not complete and valid, we will throw an exception with an error message that guides the request sender to update whatever data is bad.  Draft digital listings that are not made to order must have a file upload associated with it to be activated. If the listing is made to order, the file upload is not required.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param image_ids: An array of numeric image IDs of the images in a listing, which can include up to 10 images.
        :type image_ids: List[int]
        :param title: The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
        :type title: str
        :param description: A description string of the product for sale in the listing.
        :type description: str
        :param materials: A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
        :type materials: List[str]
        :param should_auto_renew: When true, renews a listing for four months upon expiration.
        :type should_auto_renew: bool
        :param shipping_profile_id: The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
        :type shipping_profile_id: int
        :param return_policy_id: The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). Required for active physical listings. This requirement does not apply to listings of EU-based shops.
        :type return_policy_id: int
        :param shop_section_id: The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
        :type shop_section_id: int
        :param item_weight: The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_weight: float
        :param item_length: The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_length: float
        :param item_width: The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_width: float
        :param item_height: The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_height: float
        :param item_weight_unit: A string defining the units used to measure the weight of the product. Default value is null.
        :type item_weight_unit: str
        :param item_dimensions_unit: A string defining the units used to measure the dimensions of the product. Default value is null.
        :type item_dimensions_unit: str
        :param is_taxable: When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
        :type is_taxable: bool
        :param taxonomy_id: The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
        :type taxonomy_id: int
        :param tags: A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.
        :type tags: List[str]
        :param who_made: An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
        :type who_made: str
        :param when_made: An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
        :type when_made: str
        :param featured_rank: The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
        :type featured_rank: int
        :param is_personalizable: When true, this listing is personalizable. The default value is null.
        :type is_personalizable: bool
        :param personalization_is_required: When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
        :type personalization_is_required: bool
        :param personalization_char_count_max: This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
        :type personalization_char_count_max: int
        :param personalization_instructions: A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
        :type personalization_instructions: str
        :param state: When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
        :type state: str
        :param is_supply: When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
        :type is_supply: bool
        :param production_partner_ids: An array of unique IDs of production partner ids.
        :type production_partner_ids: List[int]
        :param type: An enumerated type string that indicates whether the listing is physical or a digital download.
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_listing_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            image_ids=image_ids,
            title=title,
            description=description,
            materials=materials,
            should_auto_renew=should_auto_renew,
            shipping_profile_id=shipping_profile_id,
            return_policy_id=return_policy_id,
            shop_section_id=shop_section_id,
            item_weight=item_weight,
            item_length=item_length,
            item_width=item_width,
            item_height=item_height,
            item_weight_unit=item_weight_unit,
            item_dimensions_unit=item_dimensions_unit,
            is_taxable=is_taxable,
            taxonomy_id=taxonomy_id,
            tags=tags,
            who_made=who_made,
            when_made=when_made,
            featured_rank=featured_rank,
            is_personalizable=is_personalizable,
            personalization_is_required=personalization_is_required,
            personalization_char_count_max=personalization_char_count_max,
            personalization_instructions=personalization_instructions,
            state=state,
            is_supply=is_supply,
            production_partner_ids=production_partner_ids,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListing",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '403': "ErrorSchema",
            '409': "ErrorSchema",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_listing_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        image_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of numeric image IDs of the images in a listing, which can include up to 10 images.")] = None,
        title: Annotated[Optional[StrictStr], Field(description="The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="A description string of the product for sale in the listing.")] = None,
        materials: Annotated[Optional[List[StrictStr]], Field(description="A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")] = None,
        should_auto_renew: Annotated[Optional[StrictBool], Field(description="When true, renews a listing for four months upon expiration.")] = None,
        shipping_profile_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.")] = None,
        return_policy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). Required for active physical listings. This requirement does not apply to listings of EU-based shops.")] = None,
        shop_section_id: Annotated[Optional[StrictInt], Field(description="The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.")] = None,
        item_weight: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_length: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_width: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_height: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_weight_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the weight of the product. Default value is null.")] = None,
        item_dimensions_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the dimensions of the product. Default value is null.")] = None,
        is_taxable: Annotated[Optional[StrictBool], Field(description="When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.")] = None,
        taxonomy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.")] = None,
        who_made: Annotated[Optional[StrictStr], Field(description="An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.")] = None,
        when_made: Annotated[Optional[StrictStr], Field(description="An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.")] = None,
        featured_rank: Annotated[Optional[StrictInt], Field(description="The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.")] = None,
        is_personalizable: Annotated[Optional[StrictBool], Field(description="When true, this listing is personalizable. The default value is null.")] = None,
        personalization_is_required: Annotated[Optional[StrictBool], Field(description="When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.")] = None,
        personalization_char_count_max: Annotated[Optional[StrictInt], Field(description="This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.")] = None,
        personalization_instructions: Annotated[Optional[StrictStr], Field(description="A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.")] = None,
        is_supply: Annotated[Optional[StrictBool], Field(description="When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.")] = None,
        production_partner_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of unique IDs of production partner ids.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="An enumerated type string that indicates whether the listing is physical or a digital download.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_listing

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Updates a listing, identified by a listing ID, for a specific shop identified by a shop ID. Note that this is a PATCH method type. When activating, or manually renewing a physical listing, the shipping profile referenced by the `shipping_profile_id`, and all of its fields, along with its entries and upgrades must be complete and valid. If the shipping profile is not complete and valid, we will throw an exception with an error message that guides the request sender to update whatever data is bad.  Draft digital listings that are not made to order must have a file upload associated with it to be activated. If the listing is made to order, the file upload is not required.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param image_ids: An array of numeric image IDs of the images in a listing, which can include up to 10 images.
        :type image_ids: List[int]
        :param title: The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
        :type title: str
        :param description: A description string of the product for sale in the listing.
        :type description: str
        :param materials: A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
        :type materials: List[str]
        :param should_auto_renew: When true, renews a listing for four months upon expiration.
        :type should_auto_renew: bool
        :param shipping_profile_id: The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
        :type shipping_profile_id: int
        :param return_policy_id: The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). Required for active physical listings. This requirement does not apply to listings of EU-based shops.
        :type return_policy_id: int
        :param shop_section_id: The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
        :type shop_section_id: int
        :param item_weight: The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_weight: float
        :param item_length: The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_length: float
        :param item_width: The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_width: float
        :param item_height: The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_height: float
        :param item_weight_unit: A string defining the units used to measure the weight of the product. Default value is null.
        :type item_weight_unit: str
        :param item_dimensions_unit: A string defining the units used to measure the dimensions of the product. Default value is null.
        :type item_dimensions_unit: str
        :param is_taxable: When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
        :type is_taxable: bool
        :param taxonomy_id: The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
        :type taxonomy_id: int
        :param tags: A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.
        :type tags: List[str]
        :param who_made: An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
        :type who_made: str
        :param when_made: An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
        :type when_made: str
        :param featured_rank: The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
        :type featured_rank: int
        :param is_personalizable: When true, this listing is personalizable. The default value is null.
        :type is_personalizable: bool
        :param personalization_is_required: When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
        :type personalization_is_required: bool
        :param personalization_char_count_max: This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
        :type personalization_char_count_max: int
        :param personalization_instructions: A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
        :type personalization_instructions: str
        :param state: When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
        :type state: str
        :param is_supply: When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
        :type is_supply: bool
        :param production_partner_ids: An array of unique IDs of production partner ids.
        :type production_partner_ids: List[int]
        :param type: An enumerated type string that indicates whether the listing is physical or a digital download.
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_listing_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            image_ids=image_ids,
            title=title,
            description=description,
            materials=materials,
            should_auto_renew=should_auto_renew,
            shipping_profile_id=shipping_profile_id,
            return_policy_id=return_policy_id,
            shop_section_id=shop_section_id,
            item_weight=item_weight,
            item_length=item_length,
            item_width=item_width,
            item_height=item_height,
            item_weight_unit=item_weight_unit,
            item_dimensions_unit=item_dimensions_unit,
            is_taxable=is_taxable,
            taxonomy_id=taxonomy_id,
            tags=tags,
            who_made=who_made,
            when_made=when_made,
            featured_rank=featured_rank,
            is_personalizable=is_personalizable,
            personalization_is_required=personalization_is_required,
            personalization_char_count_max=personalization_char_count_max,
            personalization_instructions=personalization_instructions,
            state=state,
            is_supply=is_supply,
            production_partner_ids=production_partner_ids,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListing",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '403': "ErrorSchema",
            '409': "ErrorSchema",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_listing_serialize(
        self,
        shop_id,
        listing_id,
        image_ids,
        title,
        description,
        materials,
        should_auto_renew,
        shipping_profile_id,
        return_policy_id,
        shop_section_id,
        item_weight,
        item_length,
        item_width,
        item_height,
        item_weight_unit,
        item_dimensions_unit,
        is_taxable,
        taxonomy_id,
        tags,
        who_made,
        when_made,
        featured_rank,
        is_personalizable,
        personalization_is_required,
        personalization_char_count_max,
        personalization_instructions,
        state,
        is_supply,
        production_partner_ids,
        type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'image_ids': 'csv',
            'materials': 'csv',
            'tags': 'csv',
            'production_partner_ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        if listing_id is not None:
            _path_params['listing_id'] = listing_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if image_ids is not None:
            _form_params.append(('image_ids', image_ids))
        if title is not None:
            _form_params.append(('title', title))
        if description is not None:
            _form_params.append(('description', description))
        if materials is not None:
            _form_params.append(('materials', materials))
        if should_auto_renew is not None:
            _form_params.append(('should_auto_renew', should_auto_renew))
        if shipping_profile_id is not None:
            _form_params.append(('shipping_profile_id', shipping_profile_id))
        if return_policy_id is not None:
            _form_params.append(('return_policy_id', return_policy_id))
        if shop_section_id is not None:
            _form_params.append(('shop_section_id', shop_section_id))
        if item_weight is not None:
            _form_params.append(('item_weight', item_weight))
        if item_length is not None:
            _form_params.append(('item_length', item_length))
        if item_width is not None:
            _form_params.append(('item_width', item_width))
        if item_height is not None:
            _form_params.append(('item_height', item_height))
        if item_weight_unit is not None:
            _form_params.append(('item_weight_unit', item_weight_unit))
        if item_dimensions_unit is not None:
            _form_params.append(('item_dimensions_unit', item_dimensions_unit))
        if is_taxable is not None:
            _form_params.append(('is_taxable', is_taxable))
        if taxonomy_id is not None:
            _form_params.append(('taxonomy_id', taxonomy_id))
        if tags is not None:
            _form_params.append(('tags', tags))
        if who_made is not None:
            _form_params.append(('who_made', who_made))
        if when_made is not None:
            _form_params.append(('when_made', when_made))
        if featured_rank is not None:
            _form_params.append(('featured_rank', featured_rank))
        if is_personalizable is not None:
            _form_params.append(('is_personalizable', is_personalizable))
        if personalization_is_required is not None:
            _form_params.append(('personalization_is_required', personalization_is_required))
        if personalization_char_count_max is not None:
            _form_params.append(('personalization_char_count_max', personalization_char_count_max))
        if personalization_instructions is not None:
            _form_params.append(('personalization_instructions', personalization_instructions))
        if state is not None:
            _form_params.append(('state', state))
        if is_supply is not None:
            _form_params.append(('is_supply', is_supply))
        if production_partner_ids is not None:
            _form_params.append(('production_partner_ids', production_partner_ids))
        if type is not None:
            _form_params.append(('type', type))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v3/application/shops/{shop_id}/listings/{listing_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_listing_deprecated(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        image_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of numeric image IDs of the images in a listing, which can include up to 10 images.")] = None,
        title: Annotated[Optional[StrictStr], Field(description="The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="A description string of the product for sale in the listing.")] = None,
        materials: Annotated[Optional[List[StrictStr]], Field(description="A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")] = None,
        should_auto_renew: Annotated[Optional[StrictBool], Field(description="When true, renews a listing for four months upon expiration.")] = None,
        shipping_profile_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.")] = None,
        shop_section_id: Annotated[Optional[StrictInt], Field(description="The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.")] = None,
        item_weight: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_length: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_width: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_height: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_weight_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the weight of the product. Default value is null.")] = None,
        item_dimensions_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the dimensions of the product. Default value is null.")] = None,
        is_taxable: Annotated[Optional[StrictBool], Field(description="When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.")] = None,
        taxonomy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.")] = None,
        who_made: Annotated[Optional[StrictStr], Field(description="An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.")] = None,
        when_made: Annotated[Optional[StrictStr], Field(description="An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.")] = None,
        featured_rank: Annotated[Optional[StrictInt], Field(description="The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.")] = None,
        is_personalizable: Annotated[Optional[StrictBool], Field(description="When true, this listing is personalizable. The default value is null.")] = None,
        personalization_is_required: Annotated[Optional[StrictBool], Field(description="When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.")] = None,
        personalization_char_count_max: Annotated[Optional[StrictInt], Field(description="This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.")] = None,
        personalization_instructions: Annotated[Optional[StrictStr], Field(description="A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.")] = None,
        is_supply: Annotated[Optional[StrictBool], Field(description="When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.")] = None,
        production_partner_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of unique IDs of production partner ids.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="An enumerated type string that indicates whether the listing is physical or a digital download.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopListing:
        """update_listing_deprecated

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Updates a listing, identified by a listing ID, for a specific shop identified by a shop ID. This endpoint will be removed in the near future in favor of `updateListing` PATCH version.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param image_ids: An array of numeric image IDs of the images in a listing, which can include up to 10 images.
        :type image_ids: List[int]
        :param title: The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
        :type title: str
        :param description: A description string of the product for sale in the listing.
        :type description: str
        :param materials: A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
        :type materials: List[str]
        :param should_auto_renew: When true, renews a listing for four months upon expiration.
        :type should_auto_renew: bool
        :param shipping_profile_id: The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
        :type shipping_profile_id: int
        :param shop_section_id: The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
        :type shop_section_id: int
        :param item_weight: The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_weight: float
        :param item_length: The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_length: float
        :param item_width: The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_width: float
        :param item_height: The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_height: float
        :param item_weight_unit: A string defining the units used to measure the weight of the product. Default value is null.
        :type item_weight_unit: str
        :param item_dimensions_unit: A string defining the units used to measure the dimensions of the product. Default value is null.
        :type item_dimensions_unit: str
        :param is_taxable: When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
        :type is_taxable: bool
        :param taxonomy_id: The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
        :type taxonomy_id: int
        :param tags: A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.
        :type tags: List[str]
        :param who_made: An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
        :type who_made: str
        :param when_made: An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
        :type when_made: str
        :param featured_rank: The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
        :type featured_rank: int
        :param is_personalizable: When true, this listing is personalizable. The default value is null.
        :type is_personalizable: bool
        :param personalization_is_required: When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
        :type personalization_is_required: bool
        :param personalization_char_count_max: This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
        :type personalization_char_count_max: int
        :param personalization_instructions: A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
        :type personalization_instructions: str
        :param state: When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
        :type state: str
        :param is_supply: When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
        :type is_supply: bool
        :param production_partner_ids: An array of unique IDs of production partner ids.
        :type production_partner_ids: List[int]
        :param type: An enumerated type string that indicates whether the listing is physical or a digital download.
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_listing_deprecated_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            image_ids=image_ids,
            title=title,
            description=description,
            materials=materials,
            should_auto_renew=should_auto_renew,
            shipping_profile_id=shipping_profile_id,
            shop_section_id=shop_section_id,
            item_weight=item_weight,
            item_length=item_length,
            item_width=item_width,
            item_height=item_height,
            item_weight_unit=item_weight_unit,
            item_dimensions_unit=item_dimensions_unit,
            is_taxable=is_taxable,
            taxonomy_id=taxonomy_id,
            tags=tags,
            who_made=who_made,
            when_made=when_made,
            featured_rank=featured_rank,
            is_personalizable=is_personalizable,
            personalization_is_required=personalization_is_required,
            personalization_char_count_max=personalization_char_count_max,
            personalization_instructions=personalization_instructions,
            state=state,
            is_supply=is_supply,
            production_partner_ids=production_partner_ids,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListing",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '403': "ErrorSchema",
            '409': "ErrorSchema",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_listing_deprecated_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        image_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of numeric image IDs of the images in a listing, which can include up to 10 images.")] = None,
        title: Annotated[Optional[StrictStr], Field(description="The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="A description string of the product for sale in the listing.")] = None,
        materials: Annotated[Optional[List[StrictStr]], Field(description="A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")] = None,
        should_auto_renew: Annotated[Optional[StrictBool], Field(description="When true, renews a listing for four months upon expiration.")] = None,
        shipping_profile_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.")] = None,
        shop_section_id: Annotated[Optional[StrictInt], Field(description="The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.")] = None,
        item_weight: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_length: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_width: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_height: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_weight_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the weight of the product. Default value is null.")] = None,
        item_dimensions_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the dimensions of the product. Default value is null.")] = None,
        is_taxable: Annotated[Optional[StrictBool], Field(description="When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.")] = None,
        taxonomy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.")] = None,
        who_made: Annotated[Optional[StrictStr], Field(description="An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.")] = None,
        when_made: Annotated[Optional[StrictStr], Field(description="An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.")] = None,
        featured_rank: Annotated[Optional[StrictInt], Field(description="The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.")] = None,
        is_personalizable: Annotated[Optional[StrictBool], Field(description="When true, this listing is personalizable. The default value is null.")] = None,
        personalization_is_required: Annotated[Optional[StrictBool], Field(description="When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.")] = None,
        personalization_char_count_max: Annotated[Optional[StrictInt], Field(description="This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.")] = None,
        personalization_instructions: Annotated[Optional[StrictStr], Field(description="A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.")] = None,
        is_supply: Annotated[Optional[StrictBool], Field(description="When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.")] = None,
        production_partner_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of unique IDs of production partner ids.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="An enumerated type string that indicates whether the listing is physical or a digital download.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopListing]:
        """update_listing_deprecated

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Updates a listing, identified by a listing ID, for a specific shop identified by a shop ID. This endpoint will be removed in the near future in favor of `updateListing` PATCH version.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param image_ids: An array of numeric image IDs of the images in a listing, which can include up to 10 images.
        :type image_ids: List[int]
        :param title: The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
        :type title: str
        :param description: A description string of the product for sale in the listing.
        :type description: str
        :param materials: A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
        :type materials: List[str]
        :param should_auto_renew: When true, renews a listing for four months upon expiration.
        :type should_auto_renew: bool
        :param shipping_profile_id: The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
        :type shipping_profile_id: int
        :param shop_section_id: The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
        :type shop_section_id: int
        :param item_weight: The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_weight: float
        :param item_length: The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_length: float
        :param item_width: The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_width: float
        :param item_height: The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_height: float
        :param item_weight_unit: A string defining the units used to measure the weight of the product. Default value is null.
        :type item_weight_unit: str
        :param item_dimensions_unit: A string defining the units used to measure the dimensions of the product. Default value is null.
        :type item_dimensions_unit: str
        :param is_taxable: When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
        :type is_taxable: bool
        :param taxonomy_id: The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
        :type taxonomy_id: int
        :param tags: A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.
        :type tags: List[str]
        :param who_made: An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
        :type who_made: str
        :param when_made: An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
        :type when_made: str
        :param featured_rank: The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
        :type featured_rank: int
        :param is_personalizable: When true, this listing is personalizable. The default value is null.
        :type is_personalizable: bool
        :param personalization_is_required: When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
        :type personalization_is_required: bool
        :param personalization_char_count_max: This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
        :type personalization_char_count_max: int
        :param personalization_instructions: A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
        :type personalization_instructions: str
        :param state: When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
        :type state: str
        :param is_supply: When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
        :type is_supply: bool
        :param production_partner_ids: An array of unique IDs of production partner ids.
        :type production_partner_ids: List[int]
        :param type: An enumerated type string that indicates whether the listing is physical or a digital download.
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_listing_deprecated_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            image_ids=image_ids,
            title=title,
            description=description,
            materials=materials,
            should_auto_renew=should_auto_renew,
            shipping_profile_id=shipping_profile_id,
            shop_section_id=shop_section_id,
            item_weight=item_weight,
            item_length=item_length,
            item_width=item_width,
            item_height=item_height,
            item_weight_unit=item_weight_unit,
            item_dimensions_unit=item_dimensions_unit,
            is_taxable=is_taxable,
            taxonomy_id=taxonomy_id,
            tags=tags,
            who_made=who_made,
            when_made=when_made,
            featured_rank=featured_rank,
            is_personalizable=is_personalizable,
            personalization_is_required=personalization_is_required,
            personalization_char_count_max=personalization_char_count_max,
            personalization_instructions=personalization_instructions,
            state=state,
            is_supply=is_supply,
            production_partner_ids=production_partner_ids,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListing",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '403': "ErrorSchema",
            '409': "ErrorSchema",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_listing_deprecated_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        image_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of numeric image IDs of the images in a listing, which can include up to 10 images.")] = None,
        title: Annotated[Optional[StrictStr], Field(description="The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="A description string of the product for sale in the listing.")] = None,
        materials: Annotated[Optional[List[StrictStr]], Field(description="A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")] = None,
        should_auto_renew: Annotated[Optional[StrictBool], Field(description="When true, renews a listing for four months upon expiration.")] = None,
        shipping_profile_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.")] = None,
        shop_section_id: Annotated[Optional[StrictInt], Field(description="The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.")] = None,
        item_weight: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_length: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_width: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_height: Annotated[Optional[Union[Annotated[float, Field(le=1.79769313486E+308, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(description="The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.")] = None,
        item_weight_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the weight of the product. Default value is null.")] = None,
        item_dimensions_unit: Annotated[Optional[StrictStr], Field(description="A string defining the units used to measure the dimensions of the product. Default value is null.")] = None,
        is_taxable: Annotated[Optional[StrictBool], Field(description="When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.")] = None,
        taxonomy_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.")] = None,
        who_made: Annotated[Optional[StrictStr], Field(description="An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.")] = None,
        when_made: Annotated[Optional[StrictStr], Field(description="An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.")] = None,
        featured_rank: Annotated[Optional[StrictInt], Field(description="The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.")] = None,
        is_personalizable: Annotated[Optional[StrictBool], Field(description="When true, this listing is personalizable. The default value is null.")] = None,
        personalization_is_required: Annotated[Optional[StrictBool], Field(description="When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.")] = None,
        personalization_char_count_max: Annotated[Optional[StrictInt], Field(description="This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.")] = None,
        personalization_instructions: Annotated[Optional[StrictStr], Field(description="A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.")] = None,
        state: Annotated[Optional[StrictStr], Field(description="When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.")] = None,
        is_supply: Annotated[Optional[StrictBool], Field(description="When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.")] = None,
        production_partner_ids: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="An array of unique IDs of production partner ids.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="An enumerated type string that indicates whether the listing is physical or a digital download.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_listing_deprecated

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Updates a listing, identified by a listing ID, for a specific shop identified by a shop ID. This endpoint will be removed in the near future in favor of `updateListing` PATCH version.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param image_ids: An array of numeric image IDs of the images in a listing, which can include up to 10 images.
        :type image_ids: List[int]
        :param title: The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
        :type title: str
        :param description: A description string of the product for sale in the listing.
        :type description: str
        :param materials: A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
        :type materials: List[str]
        :param should_auto_renew: When true, renews a listing for four months upon expiration.
        :type should_auto_renew: bool
        :param shipping_profile_id: The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
        :type shipping_profile_id: int
        :param shop_section_id: The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
        :type shop_section_id: int
        :param item_weight: The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_weight: float
        :param item_length: The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_length: float
        :param item_width: The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_width: float
        :param item_height: The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        :type item_height: float
        :param item_weight_unit: A string defining the units used to measure the weight of the product. Default value is null.
        :type item_weight_unit: str
        :param item_dimensions_unit: A string defining the units used to measure the dimensions of the product. Default value is null.
        :type item_dimensions_unit: str
        :param is_taxable: When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
        :type is_taxable: bool
        :param taxonomy_id: The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
        :type taxonomy_id: int
        :param tags: A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.
        :type tags: List[str]
        :param who_made: An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
        :type who_made: str
        :param when_made: An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
        :type when_made: str
        :param featured_rank: The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
        :type featured_rank: int
        :param is_personalizable: When true, this listing is personalizable. The default value is null.
        :type is_personalizable: bool
        :param personalization_is_required: When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
        :type personalization_is_required: bool
        :param personalization_char_count_max: This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
        :type personalization_char_count_max: int
        :param personalization_instructions: A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
        :type personalization_instructions: str
        :param state: When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
        :type state: str
        :param is_supply: When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
        :type is_supply: bool
        :param production_partner_ids: An array of unique IDs of production partner ids.
        :type production_partner_ids: List[int]
        :param type: An enumerated type string that indicates whether the listing is physical or a digital download.
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_listing_deprecated_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            image_ids=image_ids,
            title=title,
            description=description,
            materials=materials,
            should_auto_renew=should_auto_renew,
            shipping_profile_id=shipping_profile_id,
            shop_section_id=shop_section_id,
            item_weight=item_weight,
            item_length=item_length,
            item_width=item_width,
            item_height=item_height,
            item_weight_unit=item_weight_unit,
            item_dimensions_unit=item_dimensions_unit,
            is_taxable=is_taxable,
            taxonomy_id=taxonomy_id,
            tags=tags,
            who_made=who_made,
            when_made=when_made,
            featured_rank=featured_rank,
            is_personalizable=is_personalizable,
            personalization_is_required=personalization_is_required,
            personalization_char_count_max=personalization_char_count_max,
            personalization_instructions=personalization_instructions,
            state=state,
            is_supply=is_supply,
            production_partner_ids=production_partner_ids,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopListing",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '403': "ErrorSchema",
            '409': "ErrorSchema",
            '404': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_listing_deprecated_serialize(
        self,
        shop_id,
        listing_id,
        image_ids,
        title,
        description,
        materials,
        should_auto_renew,
        shipping_profile_id,
        shop_section_id,
        item_weight,
        item_length,
        item_width,
        item_height,
        item_weight_unit,
        item_dimensions_unit,
        is_taxable,
        taxonomy_id,
        tags,
        who_made,
        when_made,
        featured_rank,
        is_personalizable,
        personalization_is_required,
        personalization_char_count_max,
        personalization_instructions,
        state,
        is_supply,
        production_partner_ids,
        type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'image_ids': 'csv',
            'materials': 'csv',
            'tags': 'csv',
            'production_partner_ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        if listing_id is not None:
            _path_params['listing_id'] = listing_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if image_ids is not None:
            _form_params.append(('image_ids', image_ids))
        if title is not None:
            _form_params.append(('title', title))
        if description is not None:
            _form_params.append(('description', description))
        if materials is not None:
            _form_params.append(('materials', materials))
        if should_auto_renew is not None:
            _form_params.append(('should_auto_renew', should_auto_renew))
        if shipping_profile_id is not None:
            _form_params.append(('shipping_profile_id', shipping_profile_id))
        if shop_section_id is not None:
            _form_params.append(('shop_section_id', shop_section_id))
        if item_weight is not None:
            _form_params.append(('item_weight', item_weight))
        if item_length is not None:
            _form_params.append(('item_length', item_length))
        if item_width is not None:
            _form_params.append(('item_width', item_width))
        if item_height is not None:
            _form_params.append(('item_height', item_height))
        if item_weight_unit is not None:
            _form_params.append(('item_weight_unit', item_weight_unit))
        if item_dimensions_unit is not None:
            _form_params.append(('item_dimensions_unit', item_dimensions_unit))
        if is_taxable is not None:
            _form_params.append(('is_taxable', is_taxable))
        if taxonomy_id is not None:
            _form_params.append(('taxonomy_id', taxonomy_id))
        if tags is not None:
            _form_params.append(('tags', tags))
        if who_made is not None:
            _form_params.append(('who_made', who_made))
        if when_made is not None:
            _form_params.append(('when_made', when_made))
        if featured_rank is not None:
            _form_params.append(('featured_rank', featured_rank))
        if is_personalizable is not None:
            _form_params.append(('is_personalizable', is_personalizable))
        if personalization_is_required is not None:
            _form_params.append(('personalization_is_required', personalization_is_required))
        if personalization_char_count_max is not None:
            _form_params.append(('personalization_char_count_max', personalization_char_count_max))
        if personalization_instructions is not None:
            _form_params.append(('personalization_instructions', personalization_instructions))
        if state is not None:
            _form_params.append(('state', state))
        if is_supply is not None:
            _form_params.append(('is_supply', is_supply))
        if production_partner_ids is not None:
            _form_params.append(('production_partner_ids', production_partner_ids))
        if type is not None:
            _form_params.append(('type', type))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v3/application/shops/{shop_id}/listings/{listing_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_listing_property(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        property_id: Annotated[int, Field(strict=True, ge=1, description="The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties).")],
        value_ids: Annotated[List[Annotated[int, Field(strict=True, ge=1)]], Field(description="An array of unique IDs of multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different sizes of a product, then the value ID list contains value IDs for each size.")],
        values: Annotated[List[StrictStr], Field(description="An array of value strings for multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different colored products, then the values array contains the color strings for each color. Note: parenthesis characters (`(` and `)`) are not allowed.")],
        scale_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of a single Etsy.com measurement scale. For example, for shoe size, there are three `scale_id`s available - `UK`, `US/Canada`, and `EU`, where `US/Canada` has `scale_id` 19.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListingPropertyValue:
        """update_listing_property

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Updates or populates the properties list defining product offerings for a listing. Each offering requires both a `value` and a `value_id` that are valid for a `scale_id` assigned to the listing or that you assign to the listing with this request.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param property_id: The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
        :type property_id: int
        :param value_ids: An array of unique IDs of multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different sizes of a product, then the value ID list contains value IDs for each size. (required)
        :type value_ids: List[int]
        :param values: An array of value strings for multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different colored products, then the values array contains the color strings for each color. Note: parenthesis characters (`(` and `)`) are not allowed. (required)
        :type values: List[str]
        :param scale_id: The numeric ID of a single Etsy.com measurement scale. For example, for shoe size, there are three `scale_id`s available - `UK`, `US/Canada`, and `EU`, where `US/Canada` has `scale_id` 19.
        :type scale_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_listing_property_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            property_id=property_id,
            value_ids=value_ids,
            values=values,
            scale_id=scale_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingPropertyValue",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_listing_property_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        property_id: Annotated[int, Field(strict=True, ge=1, description="The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties).")],
        value_ids: Annotated[List[Annotated[int, Field(strict=True, ge=1)]], Field(description="An array of unique IDs of multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different sizes of a product, then the value ID list contains value IDs for each size.")],
        values: Annotated[List[StrictStr], Field(description="An array of value strings for multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different colored products, then the values array contains the color strings for each color. Note: parenthesis characters (`(` and `)`) are not allowed.")],
        scale_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of a single Etsy.com measurement scale. For example, for shoe size, there are three `scale_id`s available - `UK`, `US/Canada`, and `EU`, where `US/Canada` has `scale_id` 19.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListingPropertyValue]:
        """update_listing_property

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Updates or populates the properties list defining product offerings for a listing. Each offering requires both a `value` and a `value_id` that are valid for a `scale_id` assigned to the listing or that you assign to the listing with this request.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param property_id: The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
        :type property_id: int
        :param value_ids: An array of unique IDs of multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different sizes of a product, then the value ID list contains value IDs for each size. (required)
        :type value_ids: List[int]
        :param values: An array of value strings for multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different colored products, then the values array contains the color strings for each color. Note: parenthesis characters (`(` and `)`) are not allowed. (required)
        :type values: List[str]
        :param scale_id: The numeric ID of a single Etsy.com measurement scale. For example, for shoe size, there are three `scale_id`s available - `UK`, `US/Canada`, and `EU`, where `US/Canada` has `scale_id` 19.
        :type scale_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_listing_property_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            property_id=property_id,
            value_ids=value_ids,
            values=values,
            scale_id=scale_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingPropertyValue",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_listing_property_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        listing_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")],
        property_id: Annotated[int, Field(strict=True, ge=1, description="The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties).")],
        value_ids: Annotated[List[Annotated[int, Field(strict=True, ge=1)]], Field(description="An array of unique IDs of multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different sizes of a product, then the value ID list contains value IDs for each size.")],
        values: Annotated[List[StrictStr], Field(description="An array of value strings for multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different colored products, then the values array contains the color strings for each color. Note: parenthesis characters (`(` and `)`) are not allowed.")],
        scale_id: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numeric ID of a single Etsy.com measurement scale. For example, for shoe size, there are three `scale_id`s available - `UK`, `US/Canada`, and `EU`, where `US/Canada` has `scale_id` 19.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_listing_property

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Updates or populates the properties list defining product offerings for a listing. Each offering requires both a `value` and a `value_id` that are valid for a `scale_id` assigned to the listing or that you assign to the listing with this request.

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param listing_id: The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
        :type listing_id: int
        :param property_id: The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
        :type property_id: int
        :param value_ids: An array of unique IDs of multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different sizes of a product, then the value ID list contains value IDs for each size. (required)
        :type value_ids: List[int]
        :param values: An array of value strings for multiple Etsy [listing property](/documentation/reference#operation/getListingProperties) values. For example, if your listing offers different colored products, then the values array contains the color strings for each color. Note: parenthesis characters (`(` and `)`) are not allowed. (required)
        :type values: List[str]
        :param scale_id: The numeric ID of a single Etsy.com measurement scale. For example, for shoe size, there are three `scale_id`s available - `UK`, `US/Canada`, and `EU`, where `US/Canada` has `scale_id` 19.
        :type scale_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_listing_property_serialize(
            shop_id=shop_id,
            listing_id=listing_id,
            property_id=property_id,
            value_ids=value_ids,
            values=values,
            scale_id=scale_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingPropertyValue",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_listing_property_serialize(
        self,
        shop_id,
        listing_id,
        property_id,
        value_ids,
        values,
        scale_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'value_ids': 'csv',
            'values': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        if listing_id is not None:
            _path_params['listing_id'] = listing_id
        if property_id is not None:
            _path_params['property_id'] = property_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if value_ids is not None:
            _form_params.append(('value_ids', value_ids))
        if values is not None:
            _form_params.append(('values', values))
        if scale_id is not None:
            _form_params.append(('scale_id', scale_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v3/application/shops/{shop_id}/listings/{listing_id}/properties/{property_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


