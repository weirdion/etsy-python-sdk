# coding: utf-8

"""
    Etsy Open API v3

    <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

    The version of the OpenAPI document: 3.0.0
    Contact: developers@etsy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from etsy_python_sdk.models.shop_receipt import ShopReceipt
from etsy_python_sdk.models.shop_receipts import ShopReceipts

from etsy_python_sdk.api_client import ApiClient, RequestSerialized
from etsy_python_sdk.api_response import ApiResponse
from etsy_python_sdk.rest import RESTResponseType


class ShopReceiptApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_receipt_shipment(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        receipt_id: Annotated[int, Field(strict=True, ge=1, description="The receipt to submit tracking for.")],
        tracking_code: Annotated[Optional[StrictStr], Field(description="The tracking code for this receipt.")] = None,
        carrier_name: Annotated[Optional[StrictStr], Field(description="The carrier name for this receipt.")] = None,
        send_bcc: Annotated[Optional[StrictBool], Field(description="If true, the shipping notification will be sent to the seller as well")] = None,
        note_to_buyer: Annotated[Optional[StrictStr], Field(description="Message to include in notification to the buyer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopReceipt:
        """create_receipt_shipment

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Submits tracking information for a Shop Receipt, which creates a Shop Receipt Shipment entry for the given receipt_id. Each time you successfully submit tracking info, Etsy sends a notification email to the buyer User. When send_bcc is true, Etsy sends shipping notifications to the seller as well. When tracking_code and carrier_name aren't sent, the receipt is marked as shipped only. If the carrier is not supported, you may use `other` as the carrier name so you can provide the tracking code. **NOTES** When shipping within the United States AND the order is over $10 _or_ when shipping to India, tracking code and carrier name ARE required. Access to ShopReceipt's first_line, second_line, city, state, zip, country_iso and formatted_address is contingent in some regions to a preferred partnership status with Etsy

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param receipt_id: The receipt to submit tracking for. (required)
        :type receipt_id: int
        :param tracking_code: The tracking code for this receipt.
        :type tracking_code: str
        :param carrier_name: The carrier name for this receipt.
        :type carrier_name: str
        :param send_bcc: If true, the shipping notification will be sent to the seller as well
        :type send_bcc: bool
        :param note_to_buyer: Message to include in notification to the buyer.
        :type note_to_buyer: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_receipt_shipment_serialize(
            shop_id=shop_id,
            receipt_id=receipt_id,
            tracking_code=tracking_code,
            carrier_name=carrier_name,
            send_bcc=send_bcc,
            note_to_buyer=note_to_buyer,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopReceipt",
            '404': "ErrorSchema",
            '409': "ErrorSchema",
            '403': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_receipt_shipment_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        receipt_id: Annotated[int, Field(strict=True, ge=1, description="The receipt to submit tracking for.")],
        tracking_code: Annotated[Optional[StrictStr], Field(description="The tracking code for this receipt.")] = None,
        carrier_name: Annotated[Optional[StrictStr], Field(description="The carrier name for this receipt.")] = None,
        send_bcc: Annotated[Optional[StrictBool], Field(description="If true, the shipping notification will be sent to the seller as well")] = None,
        note_to_buyer: Annotated[Optional[StrictStr], Field(description="Message to include in notification to the buyer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopReceipt]:
        """create_receipt_shipment

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Submits tracking information for a Shop Receipt, which creates a Shop Receipt Shipment entry for the given receipt_id. Each time you successfully submit tracking info, Etsy sends a notification email to the buyer User. When send_bcc is true, Etsy sends shipping notifications to the seller as well. When tracking_code and carrier_name aren't sent, the receipt is marked as shipped only. If the carrier is not supported, you may use `other` as the carrier name so you can provide the tracking code. **NOTES** When shipping within the United States AND the order is over $10 _or_ when shipping to India, tracking code and carrier name ARE required. Access to ShopReceipt's first_line, second_line, city, state, zip, country_iso and formatted_address is contingent in some regions to a preferred partnership status with Etsy

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param receipt_id: The receipt to submit tracking for. (required)
        :type receipt_id: int
        :param tracking_code: The tracking code for this receipt.
        :type tracking_code: str
        :param carrier_name: The carrier name for this receipt.
        :type carrier_name: str
        :param send_bcc: If true, the shipping notification will be sent to the seller as well
        :type send_bcc: bool
        :param note_to_buyer: Message to include in notification to the buyer.
        :type note_to_buyer: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_receipt_shipment_serialize(
            shop_id=shop_id,
            receipt_id=receipt_id,
            tracking_code=tracking_code,
            carrier_name=carrier_name,
            send_bcc=send_bcc,
            note_to_buyer=note_to_buyer,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopReceipt",
            '404': "ErrorSchema",
            '409': "ErrorSchema",
            '403': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_receipt_shipment_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        receipt_id: Annotated[int, Field(strict=True, ge=1, description="The receipt to submit tracking for.")],
        tracking_code: Annotated[Optional[StrictStr], Field(description="The tracking code for this receipt.")] = None,
        carrier_name: Annotated[Optional[StrictStr], Field(description="The carrier name for this receipt.")] = None,
        send_bcc: Annotated[Optional[StrictBool], Field(description="If true, the shipping notification will be sent to the seller as well")] = None,
        note_to_buyer: Annotated[Optional[StrictStr], Field(description="Message to include in notification to the buyer.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_receipt_shipment

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Submits tracking information for a Shop Receipt, which creates a Shop Receipt Shipment entry for the given receipt_id. Each time you successfully submit tracking info, Etsy sends a notification email to the buyer User. When send_bcc is true, Etsy sends shipping notifications to the seller as well. When tracking_code and carrier_name aren't sent, the receipt is marked as shipped only. If the carrier is not supported, you may use `other` as the carrier name so you can provide the tracking code. **NOTES** When shipping within the United States AND the order is over $10 _or_ when shipping to India, tracking code and carrier name ARE required. Access to ShopReceipt's first_line, second_line, city, state, zip, country_iso and formatted_address is contingent in some regions to a preferred partnership status with Etsy

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param receipt_id: The receipt to submit tracking for. (required)
        :type receipt_id: int
        :param tracking_code: The tracking code for this receipt.
        :type tracking_code: str
        :param carrier_name: The carrier name for this receipt.
        :type carrier_name: str
        :param send_bcc: If true, the shipping notification will be sent to the seller as well
        :type send_bcc: bool
        :param note_to_buyer: Message to include in notification to the buyer.
        :type note_to_buyer: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_receipt_shipment_serialize(
            shop_id=shop_id,
            receipt_id=receipt_id,
            tracking_code=tracking_code,
            carrier_name=carrier_name,
            send_bcc=send_bcc,
            note_to_buyer=note_to_buyer,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopReceipt",
            '404': "ErrorSchema",
            '409': "ErrorSchema",
            '403': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_receipt_shipment_serialize(
        self,
        shop_id,
        receipt_id,
        tracking_code,
        carrier_name,
        send_bcc,
        note_to_buyer,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        if receipt_id is not None:
            _path_params['receipt_id'] = receipt_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if tracking_code is not None:
            _form_params.append(('tracking_code', tracking_code))
        if carrier_name is not None:
            _form_params.append(('carrier_name', carrier_name))
        if send_bcc is not None:
            _form_params.append(('send_bcc', send_bcc))
        if note_to_buyer is not None:
            _form_params.append(('note_to_buyer', note_to_buyer))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v3/application/shops/{shop_id}/receipts/{receipt_id}/tracking',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_shop_receipt(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        receipt_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopReceipt:
        """get_shop_receipt

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves a receipt, identified by a receipt id, from an Etsy shop. **NOTE** Access to ShopReceipt's first_line, second_line, city, state, zip, country_iso and formatted_address is contingent in some regions to a preferred partnership status with Etsy

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param receipt_id: The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
        :type receipt_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_shop_receipt_serialize(
            shop_id=shop_id,
            receipt_id=receipt_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopReceipt",
            '404': "ErrorSchema",
            '403': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_shop_receipt_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        receipt_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopReceipt]:
        """get_shop_receipt

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves a receipt, identified by a receipt id, from an Etsy shop. **NOTE** Access to ShopReceipt's first_line, second_line, city, state, zip, country_iso and formatted_address is contingent in some regions to a preferred partnership status with Etsy

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param receipt_id: The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
        :type receipt_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_shop_receipt_serialize(
            shop_id=shop_id,
            receipt_id=receipt_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopReceipt",
            '404': "ErrorSchema",
            '403': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_shop_receipt_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        receipt_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_shop_receipt

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves a receipt, identified by a receipt id, from an Etsy shop. **NOTE** Access to ShopReceipt's first_line, second_line, city, state, zip, country_iso and formatted_address is contingent in some regions to a preferred partnership status with Etsy

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param receipt_id: The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
        :type receipt_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_shop_receipt_serialize(
            shop_id=shop_id,
            receipt_id=receipt_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopReceipt",
            '404': "ErrorSchema",
            '403': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_shop_receipt_serialize(
        self,
        shop_id,
        receipt_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        if receipt_id is not None:
            _path_params['receipt_id'] = receipt_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/shops/{shop_id}/receipts/{receipt_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_shop_receipts(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        min_created: Annotated[Optional[Annotated[int, Field(strict=True, ge=946684800)]], Field(description="The earliest unix timestamp for when a record was created.")] = None,
        max_created: Annotated[Optional[Annotated[int, Field(strict=True, ge=946684800)]], Field(description="The latest unix timestamp for when a record was created.")] = None,
        min_last_modified: Annotated[Optional[Annotated[int, Field(strict=True, ge=946684800)]], Field(description="The earliest unix timestamp for when a record last changed.")] = None,
        max_last_modified: Annotated[Optional[Annotated[int, Field(strict=True, ge=946684800)]], Field(description="The latest unix timestamp for when a record last changed.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort receipts by.")] = None,
        was_paid: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.")] = None,
        was_shipped: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.")] = None,
        was_delivered: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts that have been marked as delivered. When `false`, returns receipts where shipment has not been marked as delivered.")] = None,
        was_canceled: Annotated[Optional[StrictBool], Field(description="When `true`, the endpoint will only return the canceled receipts. When `false`, the endpoint will only return non-canceled receipts.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopReceipts:
        """get_shop_receipts

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Requests the Shop Receipts from a specific Shop, unfiltered or filtered by receipt id range or offset, date, paid, and/or shipped purchases. **NOTE** Access to ShopReceipt's first_line, second_line, city, state, zip, country_iso and formatted_address is contingent in some regions to a preferred partnership status with Etsy

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param min_created: The earliest unix timestamp for when a record was created.
        :type min_created: int
        :param max_created: The latest unix timestamp for when a record was created.
        :type max_created: int
        :param min_last_modified: The earliest unix timestamp for when a record last changed.
        :type min_last_modified: int
        :param max_last_modified: The latest unix timestamp for when a record last changed.
        :type max_last_modified: int
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param sort_on: The value to sort a search result of listings on.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort receipts by.
        :type sort_order: str
        :param was_paid: When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.
        :type was_paid: bool
        :param was_shipped: When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.
        :type was_shipped: bool
        :param was_delivered: When `true`, returns receipts that have been marked as delivered. When `false`, returns receipts where shipment has not been marked as delivered.
        :type was_delivered: bool
        :param was_canceled: When `true`, the endpoint will only return the canceled receipts. When `false`, the endpoint will only return non-canceled receipts.
        :type was_canceled: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_shop_receipts_serialize(
            shop_id=shop_id,
            min_created=min_created,
            max_created=max_created,
            min_last_modified=min_last_modified,
            max_last_modified=max_last_modified,
            limit=limit,
            offset=offset,
            sort_on=sort_on,
            sort_order=sort_order,
            was_paid=was_paid,
            was_shipped=was_shipped,
            was_delivered=was_delivered,
            was_canceled=was_canceled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopReceipts",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_shop_receipts_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        min_created: Annotated[Optional[Annotated[int, Field(strict=True, ge=946684800)]], Field(description="The earliest unix timestamp for when a record was created.")] = None,
        max_created: Annotated[Optional[Annotated[int, Field(strict=True, ge=946684800)]], Field(description="The latest unix timestamp for when a record was created.")] = None,
        min_last_modified: Annotated[Optional[Annotated[int, Field(strict=True, ge=946684800)]], Field(description="The earliest unix timestamp for when a record last changed.")] = None,
        max_last_modified: Annotated[Optional[Annotated[int, Field(strict=True, ge=946684800)]], Field(description="The latest unix timestamp for when a record last changed.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort receipts by.")] = None,
        was_paid: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.")] = None,
        was_shipped: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.")] = None,
        was_delivered: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts that have been marked as delivered. When `false`, returns receipts where shipment has not been marked as delivered.")] = None,
        was_canceled: Annotated[Optional[StrictBool], Field(description="When `true`, the endpoint will only return the canceled receipts. When `false`, the endpoint will only return non-canceled receipts.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopReceipts]:
        """get_shop_receipts

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Requests the Shop Receipts from a specific Shop, unfiltered or filtered by receipt id range or offset, date, paid, and/or shipped purchases. **NOTE** Access to ShopReceipt's first_line, second_line, city, state, zip, country_iso and formatted_address is contingent in some regions to a preferred partnership status with Etsy

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param min_created: The earliest unix timestamp for when a record was created.
        :type min_created: int
        :param max_created: The latest unix timestamp for when a record was created.
        :type max_created: int
        :param min_last_modified: The earliest unix timestamp for when a record last changed.
        :type min_last_modified: int
        :param max_last_modified: The latest unix timestamp for when a record last changed.
        :type max_last_modified: int
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param sort_on: The value to sort a search result of listings on.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort receipts by.
        :type sort_order: str
        :param was_paid: When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.
        :type was_paid: bool
        :param was_shipped: When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.
        :type was_shipped: bool
        :param was_delivered: When `true`, returns receipts that have been marked as delivered. When `false`, returns receipts where shipment has not been marked as delivered.
        :type was_delivered: bool
        :param was_canceled: When `true`, the endpoint will only return the canceled receipts. When `false`, the endpoint will only return non-canceled receipts.
        :type was_canceled: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_shop_receipts_serialize(
            shop_id=shop_id,
            min_created=min_created,
            max_created=max_created,
            min_last_modified=min_last_modified,
            max_last_modified=max_last_modified,
            limit=limit,
            offset=offset,
            sort_on=sort_on,
            sort_order=sort_order,
            was_paid=was_paid,
            was_shipped=was_shipped,
            was_delivered=was_delivered,
            was_canceled=was_canceled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopReceipts",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_shop_receipts_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        min_created: Annotated[Optional[Annotated[int, Field(strict=True, ge=946684800)]], Field(description="The earliest unix timestamp for when a record was created.")] = None,
        max_created: Annotated[Optional[Annotated[int, Field(strict=True, ge=946684800)]], Field(description="The latest unix timestamp for when a record was created.")] = None,
        min_last_modified: Annotated[Optional[Annotated[int, Field(strict=True, ge=946684800)]], Field(description="The earliest unix timestamp for when a record last changed.")] = None,
        max_last_modified: Annotated[Optional[Annotated[int, Field(strict=True, ge=946684800)]], Field(description="The latest unix timestamp for when a record last changed.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results to return.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of records to skip before selecting the first result.")] = None,
        sort_on: Annotated[Optional[StrictStr], Field(description="The value to sort a search result of listings on.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The ascending(up) or descending(down) order to sort receipts by.")] = None,
        was_paid: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.")] = None,
        was_shipped: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.")] = None,
        was_delivered: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts that have been marked as delivered. When `false`, returns receipts where shipment has not been marked as delivered.")] = None,
        was_canceled: Annotated[Optional[StrictBool], Field(description="When `true`, the endpoint will only return the canceled receipts. When `false`, the endpoint will only return non-canceled receipts.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_shop_receipts

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Requests the Shop Receipts from a specific Shop, unfiltered or filtered by receipt id range or offset, date, paid, and/or shipped purchases. **NOTE** Access to ShopReceipt's first_line, second_line, city, state, zip, country_iso and formatted_address is contingent in some regions to a preferred partnership status with Etsy

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param min_created: The earliest unix timestamp for when a record was created.
        :type min_created: int
        :param max_created: The latest unix timestamp for when a record was created.
        :type max_created: int
        :param min_last_modified: The earliest unix timestamp for when a record last changed.
        :type min_last_modified: int
        :param max_last_modified: The latest unix timestamp for when a record last changed.
        :type max_last_modified: int
        :param limit: The maximum number of results to return.
        :type limit: int
        :param offset: The number of records to skip before selecting the first result.
        :type offset: int
        :param sort_on: The value to sort a search result of listings on.
        :type sort_on: str
        :param sort_order: The ascending(up) or descending(down) order to sort receipts by.
        :type sort_order: str
        :param was_paid: When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.
        :type was_paid: bool
        :param was_shipped: When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.
        :type was_shipped: bool
        :param was_delivered: When `true`, returns receipts that have been marked as delivered. When `false`, returns receipts where shipment has not been marked as delivered.
        :type was_delivered: bool
        :param was_canceled: When `true`, the endpoint will only return the canceled receipts. When `false`, the endpoint will only return non-canceled receipts.
        :type was_canceled: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_shop_receipts_serialize(
            shop_id=shop_id,
            min_created=min_created,
            max_created=max_created,
            min_last_modified=min_last_modified,
            max_last_modified=max_last_modified,
            limit=limit,
            offset=offset,
            sort_on=sort_on,
            sort_order=sort_order,
            was_paid=was_paid,
            was_shipped=was_shipped,
            was_delivered=was_delivered,
            was_canceled=was_canceled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopReceipts",
            '403': "ErrorSchema",
            '404': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_shop_receipts_serialize(
        self,
        shop_id,
        min_created,
        max_created,
        min_last_modified,
        max_last_modified,
        limit,
        offset,
        sort_on,
        sort_order,
        was_paid,
        was_shipped,
        was_delivered,
        was_canceled,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        # process the query parameters
        if min_created is not None:
            
            _query_params.append(('min_created', min_created))
            
        if max_created is not None:
            
            _query_params.append(('max_created', max_created))
            
        if min_last_modified is not None:
            
            _query_params.append(('min_last_modified', min_last_modified))
            
        if max_last_modified is not None:
            
            _query_params.append(('max_last_modified', max_last_modified))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_on is not None:
            
            _query_params.append(('sort_on', sort_on))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if was_paid is not None:
            
            _query_params.append(('was_paid', was_paid))
            
        if was_shipped is not None:
            
            _query_params.append(('was_shipped', was_shipped))
            
        if was_delivered is not None:
            
            _query_params.append(('was_delivered', was_delivered))
            
        if was_canceled is not None:
            
            _query_params.append(('was_canceled', was_canceled))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/application/shops/{shop_id}/receipts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_shop_receipt(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        receipt_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.")],
        was_shipped: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.")] = None,
        was_paid: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ShopReceipt:
        """update_shop_receipt

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Updates the status of a receipt, identified by a receipt id, from an Etsy shop. **NOTE** Access to ShopReceipt's first_line, second_line, city, state, zip, country_iso and formatted_address is contingent in some regions to a preferred partnership status with Etsy

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param receipt_id: The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
        :type receipt_id: int
        :param was_shipped: When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.
        :type was_shipped: bool
        :param was_paid: When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.
        :type was_paid: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_shop_receipt_serialize(
            shop_id=shop_id,
            receipt_id=receipt_id,
            was_shipped=was_shipped,
            was_paid=was_paid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopReceipt",
            '404': "ErrorSchema",
            '403': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_shop_receipt_with_http_info(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        receipt_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.")],
        was_shipped: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.")] = None,
        was_paid: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ShopReceipt]:
        """update_shop_receipt

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Updates the status of a receipt, identified by a receipt id, from an Etsy shop. **NOTE** Access to ShopReceipt's first_line, second_line, city, state, zip, country_iso and formatted_address is contingent in some regions to a preferred partnership status with Etsy

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param receipt_id: The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
        :type receipt_id: int
        :param was_shipped: When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.
        :type was_shipped: bool
        :param was_paid: When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.
        :type was_paid: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_shop_receipt_serialize(
            shop_id=shop_id,
            receipt_id=receipt_id,
            was_shipped=was_shipped,
            was_paid=was_paid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopReceipt",
            '404': "ErrorSchema",
            '403': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_shop_receipt_without_preload_content(
        self,
        shop_id: Annotated[int, Field(strict=True, ge=1, description="The unique positive non-zero numeric ID for an Etsy Shop.")],
        receipt_id: Annotated[int, Field(strict=True, ge=1, description="The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.")],
        was_shipped: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.")] = None,
        was_paid: Annotated[Optional[StrictBool], Field(description="When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_shop_receipt

        <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Updates the status of a receipt, identified by a receipt id, from an Etsy shop. **NOTE** Access to ShopReceipt's first_line, second_line, city, state, zip, country_iso and formatted_address is contingent in some regions to a preferred partnership status with Etsy

        :param shop_id: The unique positive non-zero numeric ID for an Etsy Shop. (required)
        :type shop_id: int
        :param receipt_id: The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
        :type receipt_id: int
        :param was_shipped: When `true`, returns receipts where the seller shipped the product(s) in this receipt. When `false`, returns receipts where shipment has not been set.
        :type was_shipped: bool
        :param was_paid: When `true`, returns receipts where the seller has recieved payment for the receipt. When `false`, returns receipts where payment has not been received.
        :type was_paid: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_shop_receipt_serialize(
            shop_id=shop_id,
            receipt_id=receipt_id,
            was_shipped=was_shipped,
            was_paid=was_paid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ShopReceipt",
            '404': "ErrorSchema",
            '403': "ErrorSchema",
            '400': "ErrorSchema",
            '401': "ErrorSchema",
            '500': "ErrorSchema",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_shop_receipt_serialize(
        self,
        shop_id,
        receipt_id,
        was_shipped,
        was_paid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shop_id is not None:
            _path_params['shop_id'] = shop_id
        if receipt_id is not None:
            _path_params['receipt_id'] = receipt_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if was_shipped is not None:
            _form_params.append(('was_shipped', was_shipped))
        if was_paid is not None:
            _form_params.append(('was_paid', was_paid))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v3/application/shops/{shop_id}/receipts/{receipt_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


