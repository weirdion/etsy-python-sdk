# coding: utf-8

"""
    Etsy Open API v3

    <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

    The version of the OpenAPI document: 3.0.0
    Contact: developers@etsy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from etsy_python_sdk.models.payment_adjustment_item import PaymentAdjustmentItem
from typing import Optional, Set
from typing_extensions import Self

class PaymentAdjustment(BaseModel):
    """
    Represents a refund, which applies to a prior Etsy payment. All monetary amounts are in USD pennies unless otherwise specified.
    """ # noqa: E501
    payment_adjustment_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for a payment adjustment.")
    payment_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).")
    status: Optional[StrictStr] = Field(default=None, description="The status string of the payment adjustment.")
    is_success: Optional[StrictBool] = Field(default=None, description="When true, the payment adjustment was or is likely to complete successfully.")
    user_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.")
    reason_code: Optional[StrictStr] = Field(default=None, description="A human-readable string describing the reason for the refund.")
    total_adjustment_amount: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The total numeric amount of the refund in the payment currency.")
    shop_total_adjustment_amount: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The numeric amount of the refund in the shop currency.")
    buyer_total_adjustment_amount: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The numeric amount of the refund in the buyer currency.")
    total_fee_adjustment_amount: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The numeric amount of card processing fees associated with a payment adjustment.")
    create_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The transaction\\'s creation date and time, in epoch seconds.")
    created_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The transaction\\'s creation date and time, in epoch seconds.")
    update_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The date and time of the last change to the payment adjustment in epoch seconds.")
    updated_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The date and time of the last change to the payment adjustment in epoch seconds.")
    payment_adjustment_items: Optional[List[PaymentAdjustmentItem]] = Field(default=None, description="List of payment adjustment line items.")
    __properties: ClassVar[List[str]] = ["payment_adjustment_id", "payment_id", "status", "is_success", "user_id", "reason_code", "total_adjustment_amount", "shop_total_adjustment_amount", "buyer_total_adjustment_amount", "total_fee_adjustment_amount", "create_timestamp", "created_timestamp", "update_timestamp", "updated_timestamp", "payment_adjustment_items"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentAdjustment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payment_adjustment_items (list)
        _items = []
        if self.payment_adjustment_items:
            for _item_payment_adjustment_items in self.payment_adjustment_items:
                if _item_payment_adjustment_items:
                    _items.append(_item_payment_adjustment_items.to_dict())
            _dict['payment_adjustment_items'] = _items
        # set to None if total_adjustment_amount (nullable) is None
        # and model_fields_set contains the field
        if self.total_adjustment_amount is None and "total_adjustment_amount" in self.model_fields_set:
            _dict['total_adjustment_amount'] = None

        # set to None if shop_total_adjustment_amount (nullable) is None
        # and model_fields_set contains the field
        if self.shop_total_adjustment_amount is None and "shop_total_adjustment_amount" in self.model_fields_set:
            _dict['shop_total_adjustment_amount'] = None

        # set to None if buyer_total_adjustment_amount (nullable) is None
        # and model_fields_set contains the field
        if self.buyer_total_adjustment_amount is None and "buyer_total_adjustment_amount" in self.model_fields_set:
            _dict['buyer_total_adjustment_amount'] = None

        # set to None if total_fee_adjustment_amount (nullable) is None
        # and model_fields_set contains the field
        if self.total_fee_adjustment_amount is None and "total_fee_adjustment_amount" in self.model_fields_set:
            _dict['total_fee_adjustment_amount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentAdjustment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payment_adjustment_id": obj.get("payment_adjustment_id"),
            "payment_id": obj.get("payment_id"),
            "status": obj.get("status"),
            "is_success": obj.get("is_success"),
            "user_id": obj.get("user_id"),
            "reason_code": obj.get("reason_code"),
            "total_adjustment_amount": obj.get("total_adjustment_amount"),
            "shop_total_adjustment_amount": obj.get("shop_total_adjustment_amount"),
            "buyer_total_adjustment_amount": obj.get("buyer_total_adjustment_amount"),
            "total_fee_adjustment_amount": obj.get("total_fee_adjustment_amount"),
            "create_timestamp": obj.get("create_timestamp"),
            "created_timestamp": obj.get("created_timestamp"),
            "update_timestamp": obj.get("update_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp"),
            "payment_adjustment_items": [PaymentAdjustmentItem.from_dict(_item) for _item in obj["payment_adjustment_items"]] if obj.get("payment_adjustment_items") is not None else None
        })
        return _obj


