# coding: utf-8

"""
    Etsy Open API v3

    <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

    The version of the OpenAPI document: 3.0.0
    Contact: developers@etsy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Shop(BaseModel):
    """
    A shop created by an Etsy user.
    """ # noqa: E501
    shop_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The unique positive non-zero numeric ID for an Etsy Shop.")
    user_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric user ID of the [user](/documentation/reference#tag/User) who owns this shop.")
    shop_name: Optional[StrictStr] = Field(default=None, description="The shop's name string.")
    create_date: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The date and time this shop was created, in epoch seconds.")
    created_timestamp: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The date and time this shop was created, in epoch seconds.")
    title: Optional[StrictStr] = Field(default=None, description="A brief heading string for the shop\\'s main page.")
    announcement: Optional[StrictStr] = Field(default=None, description="An announcement string to buyers that displays on the shop's homepage.")
    currency_code: Optional[StrictStr] = Field(default=None, description="The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.")
    is_vacation: Optional[StrictBool] = Field(default=None, description="When true, this shop is not accepting purchases.")
    vacation_message: Optional[StrictStr] = Field(default=None, description="The shop's message string displayed when `is_vacation` is true.")
    sale_message: Optional[StrictStr] = Field(default=None, description="A message string sent to users who complete a purchase from this shop.")
    digital_sale_message: Optional[StrictStr] = Field(default=None, description="A message string sent to users who purchase a digital item from this shop.")
    update_date: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The date and time of the last update to the shop, in epoch seconds.")
    updated_timestamp: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The date and time of the last update to the shop, in epoch seconds.")
    listing_active_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of active listings in the shop.")
    digital_listing_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of digital listings in the shop.")
    login_name: Optional[StrictStr] = Field(default=None, description="The shop owner\\'s login name string.")
    accepts_custom_requests: Optional[StrictBool] = Field(default=None, description="When true, the shop accepts customization requests.")
    policy_welcome: Optional[StrictStr] = Field(default=None, description="The shop's policy welcome string (may be blank).")
    policy_payment: Optional[StrictStr] = Field(default=None, description="The shop's payment policy string (may be blank).")
    policy_shipping: Optional[StrictStr] = Field(default=None, description="The shop's shipping policy string (may be blank).")
    policy_refunds: Optional[StrictStr] = Field(default=None, description="The shop's refund policy string (may be blank).")
    policy_additional: Optional[StrictStr] = Field(default=None, description="The shop's additional policies string (may be blank).")
    policy_seller_info: Optional[StrictStr] = Field(default=None, description="The shop's seller information string (may be blank).")
    policy_update_date: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The date and time of the last update to the shop's policies, in epoch seconds.")
    policy_has_private_receipt_info: Optional[StrictBool] = Field(default=None, description="When true, EU receipts display private info.")
    has_unstructured_policies: Optional[StrictBool] = Field(default=None, description="When true, the shop displays additional unstructured policy fields.")
    policy_privacy: Optional[StrictStr] = Field(default=None, description="The shop's privacy policy string (may be blank).")
    vacation_autoreply: Optional[StrictStr] = Field(default=None, description="The shop's automatic reply string displayed in new conversations when `is_vacation` is true.")
    url: Optional[StrictStr] = Field(default=None, description="The URL string for this shop.")
    image_url_760x100: Optional[StrictStr] = Field(default=None, description="The URL string for this shop's banner image.")
    num_favorers: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of users who marked this shop a favorite.")
    languages: Optional[List[StrictStr]] = Field(default=None, description="A list of language strings for the shop's enrolled languages where the default shop language is the first element in the array.")
    icon_url_fullxfull: Optional[StrictStr] = Field(default=None, description="The URL string for this shop's icon image.")
    is_using_structured_policies: Optional[StrictBool] = Field(default=None, description="When true, the shop accepted using structured policies.")
    has_onboarded_structured_policies: Optional[StrictBool] = Field(default=None, description="When true, the shop accepted OR declined after viewing structured policies onboarding.")
    include_dispute_form_link: Optional[StrictBool] = Field(default=None, description="When true, this shop\\'s policies include a link to an EU online dispute form.")
    is_direct_checkout_onboarded: Optional[StrictBool] = Field(default=None, description="(**DEPRECATED: Replaced by _is_etsy_payments_onboarded_.) When true, the shop has onboarded onto Etsy Payments.")
    is_etsy_payments_onboarded: Optional[StrictBool] = Field(default=None, description="When true, the shop has onboarded onto Etsy Payments.")
    is_calculated_eligible: Optional[StrictBool] = Field(default=None, description="When true, the shop is eligible for calculated shipping profiles. (Only available in the US and Canada)")
    is_opted_in_to_buyer_promise: Optional[StrictBool] = Field(default=None, description="When true, the shop opted in to buyer promise.")
    is_shop_us_based: Optional[StrictBool] = Field(default=None, description="When true, the shop is based in the US.")
    transaction_sold_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The total number of sales ([transactions](/documentation/reference#tag/Shop-Receipt-Transactions)) for this shop.")
    shipping_from_country_iso: Optional[StrictStr] = Field(default=None, description="The country iso the shop is shipping from.")
    shop_location_country_iso: Optional[StrictStr] = Field(default=None, description="The country iso where the shop is located.")
    review_count: Optional[StrictInt] = Field(default=None, description="Number of reviews of shop listings in the past year.")
    review_average: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average rating based on reviews of shop listings in the past year.")
    __properties: ClassVar[List[str]] = ["shop_id", "user_id", "shop_name", "create_date", "created_timestamp", "title", "announcement", "currency_code", "is_vacation", "vacation_message", "sale_message", "digital_sale_message", "update_date", "updated_timestamp", "listing_active_count", "digital_listing_count", "login_name", "accepts_custom_requests", "policy_welcome", "policy_payment", "policy_shipping", "policy_refunds", "policy_additional", "policy_seller_info", "policy_update_date", "policy_has_private_receipt_info", "has_unstructured_policies", "policy_privacy", "vacation_autoreply", "url", "image_url_760x100", "num_favorers", "languages", "icon_url_fullxfull", "is_using_structured_policies", "has_onboarded_structured_policies", "include_dispute_form_link", "is_direct_checkout_onboarded", "is_etsy_payments_onboarded", "is_calculated_eligible", "is_opted_in_to_buyer_promise", "is_shop_us_based", "transaction_sold_count", "shipping_from_country_iso", "shop_location_country_iso", "review_count", "review_average"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Shop from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if announcement (nullable) is None
        # and model_fields_set contains the field
        if self.announcement is None and "announcement" in self.model_fields_set:
            _dict['announcement'] = None

        # set to None if vacation_message (nullable) is None
        # and model_fields_set contains the field
        if self.vacation_message is None and "vacation_message" in self.model_fields_set:
            _dict['vacation_message'] = None

        # set to None if sale_message (nullable) is None
        # and model_fields_set contains the field
        if self.sale_message is None and "sale_message" in self.model_fields_set:
            _dict['sale_message'] = None

        # set to None if digital_sale_message (nullable) is None
        # and model_fields_set contains the field
        if self.digital_sale_message is None and "digital_sale_message" in self.model_fields_set:
            _dict['digital_sale_message'] = None

        # set to None if policy_welcome (nullable) is None
        # and model_fields_set contains the field
        if self.policy_welcome is None and "policy_welcome" in self.model_fields_set:
            _dict['policy_welcome'] = None

        # set to None if policy_payment (nullable) is None
        # and model_fields_set contains the field
        if self.policy_payment is None and "policy_payment" in self.model_fields_set:
            _dict['policy_payment'] = None

        # set to None if policy_shipping (nullable) is None
        # and model_fields_set contains the field
        if self.policy_shipping is None and "policy_shipping" in self.model_fields_set:
            _dict['policy_shipping'] = None

        # set to None if policy_refunds (nullable) is None
        # and model_fields_set contains the field
        if self.policy_refunds is None and "policy_refunds" in self.model_fields_set:
            _dict['policy_refunds'] = None

        # set to None if policy_additional (nullable) is None
        # and model_fields_set contains the field
        if self.policy_additional is None and "policy_additional" in self.model_fields_set:
            _dict['policy_additional'] = None

        # set to None if policy_seller_info (nullable) is None
        # and model_fields_set contains the field
        if self.policy_seller_info is None and "policy_seller_info" in self.model_fields_set:
            _dict['policy_seller_info'] = None

        # set to None if policy_privacy (nullable) is None
        # and model_fields_set contains the field
        if self.policy_privacy is None and "policy_privacy" in self.model_fields_set:
            _dict['policy_privacy'] = None

        # set to None if vacation_autoreply (nullable) is None
        # and model_fields_set contains the field
        if self.vacation_autoreply is None and "vacation_autoreply" in self.model_fields_set:
            _dict['vacation_autoreply'] = None

        # set to None if image_url_760x100 (nullable) is None
        # and model_fields_set contains the field
        if self.image_url_760x100 is None and "image_url_760x100" in self.model_fields_set:
            _dict['image_url_760x100'] = None

        # set to None if icon_url_fullxfull (nullable) is None
        # and model_fields_set contains the field
        if self.icon_url_fullxfull is None and "icon_url_fullxfull" in self.model_fields_set:
            _dict['icon_url_fullxfull'] = None

        # set to None if shipping_from_country_iso (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_from_country_iso is None and "shipping_from_country_iso" in self.model_fields_set:
            _dict['shipping_from_country_iso'] = None

        # set to None if shop_location_country_iso (nullable) is None
        # and model_fields_set contains the field
        if self.shop_location_country_iso is None and "shop_location_country_iso" in self.model_fields_set:
            _dict['shop_location_country_iso'] = None

        # set to None if review_count (nullable) is None
        # and model_fields_set contains the field
        if self.review_count is None and "review_count" in self.model_fields_set:
            _dict['review_count'] = None

        # set to None if review_average (nullable) is None
        # and model_fields_set contains the field
        if self.review_average is None and "review_average" in self.model_fields_set:
            _dict['review_average'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Shop from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shop_id": obj.get("shop_id"),
            "user_id": obj.get("user_id"),
            "shop_name": obj.get("shop_name"),
            "create_date": obj.get("create_date"),
            "created_timestamp": obj.get("created_timestamp"),
            "title": obj.get("title"),
            "announcement": obj.get("announcement"),
            "currency_code": obj.get("currency_code"),
            "is_vacation": obj.get("is_vacation"),
            "vacation_message": obj.get("vacation_message"),
            "sale_message": obj.get("sale_message"),
            "digital_sale_message": obj.get("digital_sale_message"),
            "update_date": obj.get("update_date"),
            "updated_timestamp": obj.get("updated_timestamp"),
            "listing_active_count": obj.get("listing_active_count"),
            "digital_listing_count": obj.get("digital_listing_count"),
            "login_name": obj.get("login_name"),
            "accepts_custom_requests": obj.get("accepts_custom_requests"),
            "policy_welcome": obj.get("policy_welcome"),
            "policy_payment": obj.get("policy_payment"),
            "policy_shipping": obj.get("policy_shipping"),
            "policy_refunds": obj.get("policy_refunds"),
            "policy_additional": obj.get("policy_additional"),
            "policy_seller_info": obj.get("policy_seller_info"),
            "policy_update_date": obj.get("policy_update_date"),
            "policy_has_private_receipt_info": obj.get("policy_has_private_receipt_info"),
            "has_unstructured_policies": obj.get("has_unstructured_policies"),
            "policy_privacy": obj.get("policy_privacy"),
            "vacation_autoreply": obj.get("vacation_autoreply"),
            "url": obj.get("url"),
            "image_url_760x100": obj.get("image_url_760x100"),
            "num_favorers": obj.get("num_favorers"),
            "languages": obj.get("languages"),
            "icon_url_fullxfull": obj.get("icon_url_fullxfull"),
            "is_using_structured_policies": obj.get("is_using_structured_policies"),
            "has_onboarded_structured_policies": obj.get("has_onboarded_structured_policies"),
            "include_dispute_form_link": obj.get("include_dispute_form_link"),
            "is_direct_checkout_onboarded": obj.get("is_direct_checkout_onboarded"),
            "is_etsy_payments_onboarded": obj.get("is_etsy_payments_onboarded"),
            "is_calculated_eligible": obj.get("is_calculated_eligible"),
            "is_opted_in_to_buyer_promise": obj.get("is_opted_in_to_buyer_promise"),
            "is_shop_us_based": obj.get("is_shop_us_based"),
            "transaction_sold_count": obj.get("transaction_sold_count"),
            "shipping_from_country_iso": obj.get("shipping_from_country_iso"),
            "shop_location_country_iso": obj.get("shop_location_country_iso"),
            "review_count": obj.get("review_count"),
            "review_average": obj.get("review_average")
        })
        return _obj


