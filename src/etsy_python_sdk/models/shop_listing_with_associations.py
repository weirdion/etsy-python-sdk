# coding: utf-8

"""
    Etsy Open API v3

    <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

    The version of the OpenAPI document: 3.0.0
    Contact: developers@etsy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from etsy_python_sdk.models.listing_image import ListingImage
from etsy_python_sdk.models.listing_inventory import ListingInventory
from etsy_python_sdk.models.listing_translations import ListingTranslations
from etsy_python_sdk.models.listing_video import ListingVideo
from etsy_python_sdk.models.money import Money
from etsy_python_sdk.models.shop import Shop
from etsy_python_sdk.models.shop_production_partner import ShopProductionPartner
from etsy_python_sdk.models.shop_shipping_profile import ShopShippingProfile
from etsy_python_sdk.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class ShopListingWithAssociations(BaseModel):
    """
    A listing from a shop, which contains a product quantity, title, description, price, etc. and additional fields which represent associations.
    """ # noqa: E501
    listing_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")
    user_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for the [user](/documentation/reference#tag/User) posting the listing.")
    shop_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The unique positive non-zero numeric ID for an Etsy Shop.")
    title: Optional[StrictStr] = Field(default=None, description="The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.")
    description: Optional[StrictStr] = Field(default=None, description="A description string of the product for sale in the listing.")
    state: Optional[StrictStr] = Field(default=None, description="When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.")
    creation_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The listing\\'s creation time, in epoch seconds.")
    created_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The listing\\'s creation time, in epoch seconds.")
    ending_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The listing\\'s expiration time, in epoch seconds.")
    original_creation_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The listing\\'s creation time, in epoch seconds.")
    last_modified_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The time of the last update to the listing, in epoch seconds.")
    updated_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The time of the last update to the listing, in epoch seconds.")
    state_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The date and time of the last state change of this listing.")
    quantity: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.")
    shop_section_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID of a section in a specific Etsy shop.")
    featured_rank: Optional[StrictInt] = Field(default=None, description="The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.")
    url: Optional[StrictStr] = Field(default=None, description="The full URL to the listing's page on Etsy.")
    num_favorers: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of users who marked this Listing a favorite.")
    non_taxable: Optional[StrictBool] = Field(default=None, description="When true, applicable [shop](/documentation/reference#tag/Shop) tax rates do not apply to this listing at checkout.")
    is_taxable: Optional[StrictBool] = Field(default=None, description="When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.")
    is_customizable: Optional[StrictBool] = Field(default=None, description="When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.")
    is_personalizable: Optional[StrictBool] = Field(default=None, description="When true, this listing is personalizable. The default value is null.")
    personalization_is_required: Optional[StrictBool] = Field(default=None, description="When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.")
    personalization_char_count_max: Optional[StrictInt] = Field(default=None, description="This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.")
    personalization_instructions: Optional[StrictStr] = Field(default=None, description="When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.")
    listing_type: Optional[StrictStr] = Field(default=None, description="An enumerated type string that indicates whether the listing is physical or a digital download.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.")
    materials: Optional[List[StrictStr]] = Field(default=None, description="A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")
    shipping_profile_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.")
    return_policy_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).")
    processing_min: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The minimum number of days required to process this listing. Default value is null.")
    processing_max: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The maximum number of days required to process this listing. Default value is null.")
    who_made: Optional[StrictStr] = Field(default=None, description="An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.")
    when_made: Optional[StrictStr] = Field(default=None, description="An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.")
    is_supply: Optional[StrictBool] = Field(default=None, description="When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.")
    item_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The numeric weight of the product measured in units set in \\'item_weight_unit\\'. Default value is null. If set, the value must be greater than 0.")
    item_weight_unit: Optional[StrictStr] = Field(default=None, description="A string defining the units used to measure the weight of the product. Default value is null.")
    item_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The numeric length of the product measured in units set in \\'item_dimensions_unit\\'. Default value is null. If set, the value must be greater than 0.")
    item_width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The numeric width of the product measured in units set in \\'item_dimensions_unit\\'. Default value is null. If set, the value must be greater than 0.")
    item_height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The numeric length of the product measured in units set in \\'item_dimensions_unit\\'. Default value is null. If set, the value must be greater than 0.")
    item_dimensions_unit: Optional[StrictStr] = Field(default=None, description="A string defining the units used to measure the dimensions of the product. Default value is null.")
    is_private: Optional[StrictBool] = Field(default=None, description="When true, this is a private listing intended for a specific buyer and hidden from shop view.")
    style: Optional[List[StrictStr]] = Field(default=None, description="An array of style strings for this listing, each of which is free-form text string such as \\\"Formal\\\", or \\\"Steampunk\\\". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.")
    file_data: Optional[StrictStr] = Field(default=None, description="A string describing the files attached to a digital listing.")
    has_variations: Optional[StrictBool] = Field(default=None, description="When true, the listing has variations.")
    should_auto_renew: Optional[StrictBool] = Field(default=None, description="When true, renews a listing for four months upon expiration.")
    language: Optional[StrictStr] = Field(default=None, description="The IETF language tag for the default language of the listing. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`, `ru`.")
    price: Optional[Money] = Field(default=None, description="The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The [`getListingInventory`](/documentation/reference/#operation/getListingInventory) method requests exact prices for available offerings.")
    taxonomy_id: Optional[StrictInt] = Field(default=None, description="The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.")
    shipping_profile: Optional[ShopShippingProfile] = Field(default=None, description="An array of data representing the shipping profile resource.")
    user: Optional[User] = Field(default=None, description="Represents a single user of the site")
    shop: Optional[Shop] = Field(default=None, description="A shop created by an Etsy user.")
    images: Optional[List[ListingImage]] = Field(default=None, description="Represents a list of listing image resources, each of which contains the reference URLs and metadata for an image")
    videos: Optional[List[ListingVideo]] = Field(default=None, description="The single video associated with a listing.")
    inventory: Optional[ListingInventory] = Field(default=None, description="An enumerated string that attaches a valid association. Default value is null.")
    production_partners: Optional[List[ShopProductionPartner]] = Field(default=None, description="Represents a list of production partners for a shop.")
    skus: Optional[List[StrictStr]] = Field(default=None, description="A list of SKU strings for the listing. SKUs will only appear if the requesting user owns the shop and a valid matching OAuth 2 token is provided. When requested without the token it will be an empty array.")
    translations: Optional[ListingTranslations] = Field(default=None, description="A map of translations for the listing. Default value is a map of all supported languages keyed to null.")
    views: Optional[StrictInt] = Field(default=None, description="The number of times the listing has been viewed. This value is tabulated once per day and **only for active listings**, so the value is not real-time. If `0`, the listing has either not been viewed, not yet tabulated, was not active during the last tabulation or there was an error fetching the value. If a value is expected, call `getListing` to confirm the value.")
    __properties: ClassVar[List[str]] = ["listing_id", "user_id", "shop_id", "title", "description", "state", "creation_timestamp", "created_timestamp", "ending_timestamp", "original_creation_timestamp", "last_modified_timestamp", "updated_timestamp", "state_timestamp", "quantity", "shop_section_id", "featured_rank", "url", "num_favorers", "non_taxable", "is_taxable", "is_customizable", "is_personalizable", "personalization_is_required", "personalization_char_count_max", "personalization_instructions", "listing_type", "tags", "materials", "shipping_profile_id", "return_policy_id", "processing_min", "processing_max", "who_made", "when_made", "is_supply", "item_weight", "item_weight_unit", "item_length", "item_width", "item_height", "item_dimensions_unit", "is_private", "style", "file_data", "has_variations", "should_auto_renew", "language", "price", "taxonomy_id", "shipping_profile", "user", "shop", "images", "videos", "inventory", "production_partners", "skus", "translations", "views"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'inactive', 'sold_out', 'draft', 'expired']):
            raise ValueError("must be one of enum values ('active', 'inactive', 'sold_out', 'draft', 'expired')")
        return value

    @field_validator('listing_type')
    def listing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['physical', 'download', 'both']):
            raise ValueError("must be one of enum values ('physical', 'download', 'both')")
        return value

    @field_validator('who_made')
    def who_made_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['i_did', 'someone_else', 'collective']):
            raise ValueError("must be one of enum values ('i_did', 'someone_else', 'collective')")
        return value

    @field_validator('when_made')
    def when_made_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['made_to_order', '2020_2025', '2010_2019', '2006_2009', 'before_2006', '2000_2005', '1990s', '1980s', '1970s', '1960s', '1950s', '1940s', '1930s', '1920s', '1910s', '1900s', '1800s', '1700s', 'before_1700']):
            raise ValueError("must be one of enum values ('made_to_order', '2020_2025', '2010_2019', '2006_2009', 'before_2006', '2000_2005', '1990s', '1980s', '1970s', '1960s', '1950s', '1940s', '1930s', '1920s', '1910s', '1900s', '1800s', '1700s', 'before_1700')")
        return value

    @field_validator('item_weight_unit')
    def item_weight_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['oz', 'lb', 'g', 'kg']):
            raise ValueError("must be one of enum values ('oz', 'lb', 'g', 'kg')")
        return value

    @field_validator('item_dimensions_unit')
    def item_dimensions_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['in', 'ft', 'mm', 'cm', 'm', 'yd', 'inches']):
            raise ValueError("must be one of enum values ('in', 'ft', 'mm', 'cm', 'm', 'yd', 'inches')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShopListingWithAssociations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_profile
        if self.shipping_profile:
            _dict['shipping_profile'] = self.shipping_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shop
        if self.shop:
            _dict['shop'] = self.shop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in videos (list)
        _items = []
        if self.videos:
            for _item_videos in self.videos:
                if _item_videos:
                    _items.append(_item_videos.to_dict())
            _dict['videos'] = _items
        # override the default output from pydantic by calling `to_dict()` of inventory
        if self.inventory:
            _dict['inventory'] = self.inventory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in production_partners (list)
        _items = []
        if self.production_partners:
            for _item_production_partners in self.production_partners:
                if _item_production_partners:
                    _items.append(_item_production_partners.to_dict())
            _dict['production_partners'] = _items
        # override the default output from pydantic by calling `to_dict()` of translations
        if self.translations:
            _dict['translations'] = self.translations.to_dict()
        # set to None if state_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.state_timestamp is None and "state_timestamp" in self.model_fields_set:
            _dict['state_timestamp'] = None

        # set to None if shop_section_id (nullable) is None
        # and model_fields_set contains the field
        if self.shop_section_id is None and "shop_section_id" in self.model_fields_set:
            _dict['shop_section_id'] = None

        # set to None if personalization_char_count_max (nullable) is None
        # and model_fields_set contains the field
        if self.personalization_char_count_max is None and "personalization_char_count_max" in self.model_fields_set:
            _dict['personalization_char_count_max'] = None

        # set to None if personalization_instructions (nullable) is None
        # and model_fields_set contains the field
        if self.personalization_instructions is None and "personalization_instructions" in self.model_fields_set:
            _dict['personalization_instructions'] = None

        # set to None if shipping_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_profile_id is None and "shipping_profile_id" in self.model_fields_set:
            _dict['shipping_profile_id'] = None

        # set to None if return_policy_id (nullable) is None
        # and model_fields_set contains the field
        if self.return_policy_id is None and "return_policy_id" in self.model_fields_set:
            _dict['return_policy_id'] = None

        # set to None if processing_min (nullable) is None
        # and model_fields_set contains the field
        if self.processing_min is None and "processing_min" in self.model_fields_set:
            _dict['processing_min'] = None

        # set to None if processing_max (nullable) is None
        # and model_fields_set contains the field
        if self.processing_max is None and "processing_max" in self.model_fields_set:
            _dict['processing_max'] = None

        # set to None if who_made (nullable) is None
        # and model_fields_set contains the field
        if self.who_made is None and "who_made" in self.model_fields_set:
            _dict['who_made'] = None

        # set to None if when_made (nullable) is None
        # and model_fields_set contains the field
        if self.when_made is None and "when_made" in self.model_fields_set:
            _dict['when_made'] = None

        # set to None if is_supply (nullable) is None
        # and model_fields_set contains the field
        if self.is_supply is None and "is_supply" in self.model_fields_set:
            _dict['is_supply'] = None

        # set to None if item_weight (nullable) is None
        # and model_fields_set contains the field
        if self.item_weight is None and "item_weight" in self.model_fields_set:
            _dict['item_weight'] = None

        # set to None if item_weight_unit (nullable) is None
        # and model_fields_set contains the field
        if self.item_weight_unit is None and "item_weight_unit" in self.model_fields_set:
            _dict['item_weight_unit'] = None

        # set to None if item_length (nullable) is None
        # and model_fields_set contains the field
        if self.item_length is None and "item_length" in self.model_fields_set:
            _dict['item_length'] = None

        # set to None if item_width (nullable) is None
        # and model_fields_set contains the field
        if self.item_width is None and "item_width" in self.model_fields_set:
            _dict['item_width'] = None

        # set to None if item_height (nullable) is None
        # and model_fields_set contains the field
        if self.item_height is None and "item_height" in self.model_fields_set:
            _dict['item_height'] = None

        # set to None if item_dimensions_unit (nullable) is None
        # and model_fields_set contains the field
        if self.item_dimensions_unit is None and "item_dimensions_unit" in self.model_fields_set:
            _dict['item_dimensions_unit'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        # set to None if taxonomy_id (nullable) is None
        # and model_fields_set contains the field
        if self.taxonomy_id is None and "taxonomy_id" in self.model_fields_set:
            _dict['taxonomy_id'] = None

        # set to None if shipping_profile (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_profile is None and "shipping_profile" in self.model_fields_set:
            _dict['shipping_profile'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        # set to None if shop (nullable) is None
        # and model_fields_set contains the field
        if self.shop is None and "shop" in self.model_fields_set:
            _dict['shop'] = None

        # set to None if inventory (nullable) is None
        # and model_fields_set contains the field
        if self.inventory is None and "inventory" in self.model_fields_set:
            _dict['inventory'] = None

        # set to None if translations (nullable) is None
        # and model_fields_set contains the field
        if self.translations is None and "translations" in self.model_fields_set:
            _dict['translations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShopListingWithAssociations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "listing_id": obj.get("listing_id"),
            "user_id": obj.get("user_id"),
            "shop_id": obj.get("shop_id"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "state": obj.get("state"),
            "creation_timestamp": obj.get("creation_timestamp"),
            "created_timestamp": obj.get("created_timestamp"),
            "ending_timestamp": obj.get("ending_timestamp"),
            "original_creation_timestamp": obj.get("original_creation_timestamp"),
            "last_modified_timestamp": obj.get("last_modified_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp"),
            "state_timestamp": obj.get("state_timestamp"),
            "quantity": obj.get("quantity"),
            "shop_section_id": obj.get("shop_section_id"),
            "featured_rank": obj.get("featured_rank"),
            "url": obj.get("url"),
            "num_favorers": obj.get("num_favorers"),
            "non_taxable": obj.get("non_taxable"),
            "is_taxable": obj.get("is_taxable"),
            "is_customizable": obj.get("is_customizable"),
            "is_personalizable": obj.get("is_personalizable"),
            "personalization_is_required": obj.get("personalization_is_required"),
            "personalization_char_count_max": obj.get("personalization_char_count_max"),
            "personalization_instructions": obj.get("personalization_instructions"),
            "listing_type": obj.get("listing_type"),
            "tags": obj.get("tags"),
            "materials": obj.get("materials"),
            "shipping_profile_id": obj.get("shipping_profile_id"),
            "return_policy_id": obj.get("return_policy_id"),
            "processing_min": obj.get("processing_min"),
            "processing_max": obj.get("processing_max"),
            "who_made": obj.get("who_made"),
            "when_made": obj.get("when_made"),
            "is_supply": obj.get("is_supply"),
            "item_weight": obj.get("item_weight"),
            "item_weight_unit": obj.get("item_weight_unit"),
            "item_length": obj.get("item_length"),
            "item_width": obj.get("item_width"),
            "item_height": obj.get("item_height"),
            "item_dimensions_unit": obj.get("item_dimensions_unit"),
            "is_private": obj.get("is_private"),
            "style": obj.get("style"),
            "file_data": obj.get("file_data"),
            "has_variations": obj.get("has_variations"),
            "should_auto_renew": obj.get("should_auto_renew"),
            "language": obj.get("language"),
            "price": Money.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "taxonomy_id": obj.get("taxonomy_id"),
            "shipping_profile": ShopShippingProfile.from_dict(obj["shipping_profile"]) if obj.get("shipping_profile") is not None else None,
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "shop": Shop.from_dict(obj["shop"]) if obj.get("shop") is not None else None,
            "images": [ListingImage.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "videos": [ListingVideo.from_dict(_item) for _item in obj["videos"]] if obj.get("videos") is not None else None,
            "inventory": ListingInventory.from_dict(obj["inventory"]) if obj.get("inventory") is not None else None,
            "production_partners": [ShopProductionPartner.from_dict(_item) for _item in obj["production_partners"]] if obj.get("production_partners") is not None else None,
            "skus": obj.get("skus"),
            "translations": ListingTranslations.from_dict(obj["translations"]) if obj.get("translations") is not None else None,
            "views": obj.get("views")
        })
        return _obj


