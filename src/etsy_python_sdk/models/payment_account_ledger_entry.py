# coding: utf-8

"""
    Etsy Open API v3

    <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

    The version of the OpenAPI document: 3.0.0
    Contact: developers@etsy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from etsy_python_sdk.models.payment_adjustment import PaymentAdjustment
from typing import Optional, Set
from typing_extensions import Self

class PaymentAccountLedgerEntry(BaseModel):
    """
    Represents an entry in a shop's ledger.
    """ # noqa: E501
    entry_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The ledger entry's numeric ID.")
    ledger_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The ledger's numeric ID.")
    sequence_number: Optional[StrictInt] = Field(default=None, description="The sequence allows ledger entries to be sorted chronologically. The higher the sequence, the more recent the entry.")
    amount: Optional[StrictInt] = Field(default=None, description="The amount of money credited to the ledger.")
    currency: Optional[StrictStr] = Field(default=None, description="The currency of the entry on the ledger.")
    description: Optional[StrictStr] = Field(default=None, description="Details what kind of ledger entry this is: a payment, refund, reversal of a failed refund, disbursement, returned disbursement, recoupment, miscellaneous credit, miscellaneous debit, or bill payment.")
    balance: Optional[StrictInt] = Field(default=None, description="The amount of money in the shop's ledger the moment after this entry was applied.")
    create_date: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The date and time the ledger entry was created in Epoch seconds.")
    created_timestamp: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The date and time the ledger entry was created in Epoch seconds.")
    ledger_type: Optional[StrictStr] = Field(default=None, description="The original reference type for the ledger entry.")
    reference_type: Optional[StrictStr] = Field(default=None, description="The object type the ledger entry refers to.")
    reference_id: Optional[StrictStr] = Field(default=None, description="The object id the ledger entry refers to.")
    payment_adjustments: Optional[List[PaymentAdjustment]] = Field(default=None, description="List of refund objects on an Etsy Payments transaction. All monetary amounts are in USD pennies unless otherwise specified.")
    __properties: ClassVar[List[str]] = ["entry_id", "ledger_id", "sequence_number", "amount", "currency", "description", "balance", "create_date", "created_timestamp", "ledger_type", "reference_type", "reference_id", "payment_adjustments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentAccountLedgerEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payment_adjustments (list)
        _items = []
        if self.payment_adjustments:
            for _item_payment_adjustments in self.payment_adjustments:
                if _item_payment_adjustments:
                    _items.append(_item_payment_adjustments.to_dict())
            _dict['payment_adjustments'] = _items
        # set to None if reference_id (nullable) is None
        # and model_fields_set contains the field
        if self.reference_id is None and "reference_id" in self.model_fields_set:
            _dict['reference_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentAccountLedgerEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entry_id": obj.get("entry_id"),
            "ledger_id": obj.get("ledger_id"),
            "sequence_number": obj.get("sequence_number"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "description": obj.get("description"),
            "balance": obj.get("balance"),
            "create_date": obj.get("create_date"),
            "created_timestamp": obj.get("created_timestamp"),
            "ledger_type": obj.get("ledger_type"),
            "reference_type": obj.get("reference_type"),
            "reference_id": obj.get("reference_id"),
            "payment_adjustments": [PaymentAdjustment.from_dict(_item) for _item in obj["payment_adjustments"]] if obj.get("payment_adjustments") is not None else None
        })
        return _obj


