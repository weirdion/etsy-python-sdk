# coding: utf-8

"""
    Etsy Open API v3

    <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

    The version of the OpenAPI document: 3.0.0
    Contact: developers@etsy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from etsy_python_sdk.models.listing_property_value import ListingPropertyValue
from etsy_python_sdk.models.money import Money
from etsy_python_sdk.models.transaction_variations import TransactionVariations
from typing import Optional, Set
from typing_extensions import Self

class ShopReceiptTransaction(BaseModel):
    """
    A transaction object associated with a shop receipt. Etsy generates one transaction per listing purchased as recorded on the order receipt.
    """ # noqa: E501
    transaction_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The unique numeric ID for a transaction.")
    title: Optional[StrictStr] = Field(default=None, description="The title string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.")
    description: Optional[StrictStr] = Field(default=None, description="The description string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.")
    seller_user_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric user ID for the seller in this transaction.")
    buyer_user_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric user ID for the buyer in this transaction.")
    create_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The transaction\\'s creation date and time, in epoch seconds.")
    created_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The transaction\\'s creation date and time, in epoch seconds.")
    paid_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The transaction\\'s paid date and time, in epoch seconds.")
    shipped_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The transaction\\'s shipping date and time, in epoch seconds.")
    quantity: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The numeric quantity of products purchased in this transaction.")
    listing_image_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.")
    receipt_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.")
    is_digital: Optional[StrictBool] = Field(default=None, description="When true, the transaction recorded the purchase of a digital listing.")
    file_data: Optional[StrictStr] = Field(default=None, description="A string describing the files purchased in this transaction.")
    listing_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.")
    transaction_type: Optional[StrictStr] = Field(default=None, description="The type string for the transaction, usually \"listing\".")
    product_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for a specific [product](/documentation/reference#tag/ShopListing-Product) purchased from a listing.")
    sku: Optional[StrictStr] = Field(default=None, description="The SKU string for the product")
    price: Optional[Money] = Field(default=None, description="A money object representing the price recorded the transaction.")
    shipping_cost: Optional[Money] = Field(default=None, description="A money object representing the shipping cost for this transaction.")
    variations: Optional[List[TransactionVariations]] = Field(default=None, description="Array of variations and personalizations the buyer chose.")
    product_data: Optional[List[ListingPropertyValue]] = Field(default=None, description="A list of property value entries for this product. Note: parenthesis characters (`(` and `)`) are not allowed.")
    shipping_profile_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The ID of the shipping profile selected for this listing.")
    min_processing_days: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The minimum number of days for processing the listing.")
    max_processing_days: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The maximum number of days for processing the listing.")
    shipping_method: Optional[StrictStr] = Field(default=None, description="Name of the selected shipping method.")
    shipping_upgrade: Optional[StrictStr] = Field(default=None, description="The name of the shipping upgrade selected for this listing. Default value is null.")
    expected_ship_date: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The date & time of the expected ship date, in epoch seconds.")
    buyer_coupon: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="The amount of the buyer coupon that was discounted in the shop's currency.")
    shop_coupon: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="The amount of the shop coupon that was discounted in the shop's currency.")
    __properties: ClassVar[List[str]] = ["transaction_id", "title", "description", "seller_user_id", "buyer_user_id", "create_timestamp", "created_timestamp", "paid_timestamp", "shipped_timestamp", "quantity", "listing_image_id", "receipt_id", "is_digital", "file_data", "listing_id", "transaction_type", "product_id", "sku", "price", "shipping_cost", "variations", "product_data", "shipping_profile_id", "min_processing_days", "max_processing_days", "shipping_method", "shipping_upgrade", "expected_ship_date", "buyer_coupon", "shop_coupon"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShopReceiptTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_cost
        if self.shipping_cost:
            _dict['shipping_cost'] = self.shipping_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in variations (list)
        _items = []
        if self.variations:
            for _item_variations in self.variations:
                if _item_variations:
                    _items.append(_item_variations.to_dict())
            _dict['variations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_data (list)
        _items = []
        if self.product_data:
            for _item_product_data in self.product_data:
                if _item_product_data:
                    _items.append(_item_product_data.to_dict())
            _dict['product_data'] = _items
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if paid_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.paid_timestamp is None and "paid_timestamp" in self.model_fields_set:
            _dict['paid_timestamp'] = None

        # set to None if shipped_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.shipped_timestamp is None and "shipped_timestamp" in self.model_fields_set:
            _dict['shipped_timestamp'] = None

        # set to None if listing_image_id (nullable) is None
        # and model_fields_set contains the field
        if self.listing_image_id is None and "listing_image_id" in self.model_fields_set:
            _dict['listing_image_id'] = None

        # set to None if listing_id (nullable) is None
        # and model_fields_set contains the field
        if self.listing_id is None and "listing_id" in self.model_fields_set:
            _dict['listing_id'] = None

        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['product_id'] = None

        # set to None if sku (nullable) is None
        # and model_fields_set contains the field
        if self.sku is None and "sku" in self.model_fields_set:
            _dict['sku'] = None

        # set to None if shipping_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_profile_id is None and "shipping_profile_id" in self.model_fields_set:
            _dict['shipping_profile_id'] = None

        # set to None if min_processing_days (nullable) is None
        # and model_fields_set contains the field
        if self.min_processing_days is None and "min_processing_days" in self.model_fields_set:
            _dict['min_processing_days'] = None

        # set to None if max_processing_days (nullable) is None
        # and model_fields_set contains the field
        if self.max_processing_days is None and "max_processing_days" in self.model_fields_set:
            _dict['max_processing_days'] = None

        # set to None if shipping_method (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_method is None and "shipping_method" in self.model_fields_set:
            _dict['shipping_method'] = None

        # set to None if shipping_upgrade (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_upgrade is None and "shipping_upgrade" in self.model_fields_set:
            _dict['shipping_upgrade'] = None

        # set to None if expected_ship_date (nullable) is None
        # and model_fields_set contains the field
        if self.expected_ship_date is None and "expected_ship_date" in self.model_fields_set:
            _dict['expected_ship_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShopReceiptTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transaction_id": obj.get("transaction_id"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "seller_user_id": obj.get("seller_user_id"),
            "buyer_user_id": obj.get("buyer_user_id"),
            "create_timestamp": obj.get("create_timestamp"),
            "created_timestamp": obj.get("created_timestamp"),
            "paid_timestamp": obj.get("paid_timestamp"),
            "shipped_timestamp": obj.get("shipped_timestamp"),
            "quantity": obj.get("quantity"),
            "listing_image_id": obj.get("listing_image_id"),
            "receipt_id": obj.get("receipt_id"),
            "is_digital": obj.get("is_digital"),
            "file_data": obj.get("file_data"),
            "listing_id": obj.get("listing_id"),
            "transaction_type": obj.get("transaction_type"),
            "product_id": obj.get("product_id"),
            "sku": obj.get("sku"),
            "price": Money.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "shipping_cost": Money.from_dict(obj["shipping_cost"]) if obj.get("shipping_cost") is not None else None,
            "variations": [TransactionVariations.from_dict(_item) for _item in obj["variations"]] if obj.get("variations") is not None else None,
            "product_data": [ListingPropertyValue.from_dict(_item) for _item in obj["product_data"]] if obj.get("product_data") is not None else None,
            "shipping_profile_id": obj.get("shipping_profile_id"),
            "min_processing_days": obj.get("min_processing_days"),
            "max_processing_days": obj.get("max_processing_days"),
            "shipping_method": obj.get("shipping_method"),
            "shipping_upgrade": obj.get("shipping_upgrade"),
            "expected_ship_date": obj.get("expected_ship_date"),
            "buyer_coupon": obj.get("buyer_coupon") if obj.get("buyer_coupon") is not None else 0,
            "shop_coupon": obj.get("shop_coupon") if obj.get("shop_coupon") is not None else 0
        })
        return _obj


