# coding: utf-8

"""
    Etsy Open API v3

    <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

    The version of the OpenAPI document: 3.0.0
    Contact: developers@etsy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from etsy_python_sdk.models.listing_translation import ListingTranslation
from typing import Optional, Set
from typing_extensions import Self

class ListingTranslations(BaseModel):
    """
    Container for all current supported translations of a listing. Note that Etsy periodically adds/removes languages, so this list may change in the future.
    """ # noqa: E501
    de: Optional[ListingTranslation] = None
    en_gb: Optional[ListingTranslation] = Field(default=None, alias="en-GB")
    en_in: Optional[ListingTranslation] = Field(default=None, alias="en-IN")
    en_us: Optional[ListingTranslation] = Field(default=None, alias="en-US")
    es: Optional[ListingTranslation] = None
    fr: Optional[ListingTranslation] = None
    it: Optional[ListingTranslation] = None
    ja: Optional[ListingTranslation] = None
    nl: Optional[ListingTranslation] = None
    pl: Optional[ListingTranslation] = None
    pt: Optional[ListingTranslation] = None
    ru: Optional[ListingTranslation] = None
    __properties: ClassVar[List[str]] = ["de", "en-GB", "en-IN", "en-US", "es", "fr", "it", "ja", "nl", "pl", "pt", "ru"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListingTranslations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of de
        if self.de:
            _dict['de'] = self.de.to_dict()
        # override the default output from pydantic by calling `to_dict()` of en_gb
        if self.en_gb:
            _dict['en-GB'] = self.en_gb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of en_in
        if self.en_in:
            _dict['en-IN'] = self.en_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of en_us
        if self.en_us:
            _dict['en-US'] = self.en_us.to_dict()
        # override the default output from pydantic by calling `to_dict()` of es
        if self.es:
            _dict['es'] = self.es.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fr
        if self.fr:
            _dict['fr'] = self.fr.to_dict()
        # override the default output from pydantic by calling `to_dict()` of it
        if self.it:
            _dict['it'] = self.it.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ja
        if self.ja:
            _dict['ja'] = self.ja.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nl
        if self.nl:
            _dict['nl'] = self.nl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pl
        if self.pl:
            _dict['pl'] = self.pl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pt
        if self.pt:
            _dict['pt'] = self.pt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ru
        if self.ru:
            _dict['ru'] = self.ru.to_dict()
        # set to None if de (nullable) is None
        # and model_fields_set contains the field
        if self.de is None and "de" in self.model_fields_set:
            _dict['de'] = None

        # set to None if en_gb (nullable) is None
        # and model_fields_set contains the field
        if self.en_gb is None and "en_gb" in self.model_fields_set:
            _dict['en-GB'] = None

        # set to None if en_in (nullable) is None
        # and model_fields_set contains the field
        if self.en_in is None and "en_in" in self.model_fields_set:
            _dict['en-IN'] = None

        # set to None if en_us (nullable) is None
        # and model_fields_set contains the field
        if self.en_us is None and "en_us" in self.model_fields_set:
            _dict['en-US'] = None

        # set to None if es (nullable) is None
        # and model_fields_set contains the field
        if self.es is None and "es" in self.model_fields_set:
            _dict['es'] = None

        # set to None if fr (nullable) is None
        # and model_fields_set contains the field
        if self.fr is None and "fr" in self.model_fields_set:
            _dict['fr'] = None

        # set to None if it (nullable) is None
        # and model_fields_set contains the field
        if self.it is None and "it" in self.model_fields_set:
            _dict['it'] = None

        # set to None if ja (nullable) is None
        # and model_fields_set contains the field
        if self.ja is None and "ja" in self.model_fields_set:
            _dict['ja'] = None

        # set to None if nl (nullable) is None
        # and model_fields_set contains the field
        if self.nl is None and "nl" in self.model_fields_set:
            _dict['nl'] = None

        # set to None if pl (nullable) is None
        # and model_fields_set contains the field
        if self.pl is None and "pl" in self.model_fields_set:
            _dict['pl'] = None

        # set to None if pt (nullable) is None
        # and model_fields_set contains the field
        if self.pt is None and "pt" in self.model_fields_set:
            _dict['pt'] = None

        # set to None if ru (nullable) is None
        # and model_fields_set contains the field
        if self.ru is None and "ru" in self.model_fields_set:
            _dict['ru'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListingTranslations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "de": ListingTranslation.from_dict(obj["de"]) if obj.get("de") is not None else None,
            "en-GB": ListingTranslation.from_dict(obj["en-GB"]) if obj.get("en-GB") is not None else None,
            "en-IN": ListingTranslation.from_dict(obj["en-IN"]) if obj.get("en-IN") is not None else None,
            "en-US": ListingTranslation.from_dict(obj["en-US"]) if obj.get("en-US") is not None else None,
            "es": ListingTranslation.from_dict(obj["es"]) if obj.get("es") is not None else None,
            "fr": ListingTranslation.from_dict(obj["fr"]) if obj.get("fr") is not None else None,
            "it": ListingTranslation.from_dict(obj["it"]) if obj.get("it") is not None else None,
            "ja": ListingTranslation.from_dict(obj["ja"]) if obj.get("ja") is not None else None,
            "nl": ListingTranslation.from_dict(obj["nl"]) if obj.get("nl") is not None else None,
            "pl": ListingTranslation.from_dict(obj["pl"]) if obj.get("pl") is not None else None,
            "pt": ListingTranslation.from_dict(obj["pt"]) if obj.get("pt") is not None else None,
            "ru": ListingTranslation.from_dict(obj["ru"]) if obj.get("ru") is not None else None
        })
        return _obj


