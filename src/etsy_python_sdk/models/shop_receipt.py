# coding: utf-8

"""
    Etsy Open API v3

    <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

    The version of the OpenAPI document: 3.0.0
    Contact: developers@etsy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from etsy_python_sdk.models.money import Money
from etsy_python_sdk.models.shop_receipt_shipment import ShopReceiptShipment
from etsy_python_sdk.models.shop_receipt_transaction import ShopReceiptTransaction
from etsy_python_sdk.models.shop_refund import ShopRefund
from typing import Optional, Set
from typing_extensions import Self

class ShopReceipt(BaseModel):
    """
    The record of a purchase from a shop. Shop receipts display monetary values using the shop's currency.
    """ # noqa: E501
    receipt_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.")
    receipt_type: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The numeric value for the Etsy channel that serviced the purchase: 0 for Etsy.com, 1 for a Pattern shop.")
    seller_user_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.")
    seller_email: Optional[StrictStr] = Field(default=None, description="The email address string for the seller of the listing.")
    buyer_user_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for the [user](/documentation/reference#tag/User) making the purchase.")
    buyer_email: Optional[StrictStr] = Field(default=None, description="The email address string for the buyer of the listing. It will be null if access hasn't been granted. Access is case-by-case and subject to approval.")
    name: Optional[StrictStr] = Field(default=None, description="The name string for the recipient in the shipping address.")
    first_line: Optional[StrictStr] = Field(default=None, description="The first address line string for the recipient in the shipping address.")
    second_line: Optional[StrictStr] = Field(default=None, description="The optional second address line string for the recipient in the shipping address.")
    city: Optional[StrictStr] = Field(default=None, description="The city string for the recipient in the shipping address.")
    state: Optional[StrictStr] = Field(default=None, description="The state string for the recipient in the shipping address.")
    zip: Optional[StrictStr] = Field(default=None, description="The zip code string (not necessarily a number) for the recipient in the shipping address.")
    status: Optional[StrictStr] = Field(default=None, description="The current order status string. One of: `paid`, `completed`, `open`, `payment processing` or `canceled`.")
    formatted_address: Optional[StrictStr] = Field(default=None, description="The formatted shipping address string for the recipient in the shipping address.")
    country_iso: Optional[StrictStr] = Field(default=None, description="The ISO-3166 alpha-2 country code string for the recipient in the shipping address.")
    payment_method: Optional[StrictStr] = Field(default=None, description="The payment method string identifying purchaser's payment method, which must be one of: \\'cc\\' (credit card), \\'paypal\\', \\'check\\', \\'mo\\' (money order), \\'bt\\' (bank transfer), \\'other\\', \\'ideal\\', \\'sofort\\', \\'apple_pay\\', \\'google\\', \\'android_pay\\', \\'google_pay\\', \\'klarna\\', \\'k_pay_in_4\\' (klarna), \\'k_pay_in_3\\' (klarna), or \\'k_financing\\' (klarna).")
    payment_email: Optional[StrictStr] = Field(default=None, description="The email address string for the email address to which to send payment confirmation")
    message_from_seller: Optional[StrictStr] = Field(default=None, description="An optional message string from the seller.")
    message_from_buyer: Optional[StrictStr] = Field(default=None, description="An optional message string from the buyer.")
    message_from_payment: Optional[StrictStr] = Field(default=None, description="The machine-generated acknowledgement string from the payment system.")
    is_paid: Optional[StrictBool] = Field(default=None, description="When true, buyer paid for this purchase.")
    is_shipped: Optional[StrictBool] = Field(default=None, description="When true, seller shipped the products.")
    create_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The receipt\\'s creation time, in epoch seconds.")
    created_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The receipt\\'s creation time, in epoch seconds.")
    update_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The time of the last update to the receipt, in epoch seconds.")
    updated_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The time of the last update to the receipt, in epoch seconds.")
    is_gift: Optional[StrictBool] = Field(default=None, description="When true, the buyer indicated this purchase is a gift.")
    gift_message: Optional[StrictStr] = Field(default=None, description="A gift message string the buyer requests delivered with the product.")
    gift_sender: Optional[StrictStr] = Field(default=None, description="The name of the person who sent the gift.")
    grandtotal: Optional[Money] = Field(default=None, description="A number equal to the total_price minus the coupon discount plus tax and shipping costs.")
    subtotal: Optional[Money] = Field(default=None, description="A number equal to the total_price minus coupon discounts. Does not included tax or shipping costs.")
    total_price: Optional[Money] = Field(default=None, description="A number equal to the sum of the individual listings\\' (price * quantity). Does not included tax or shipping costs.")
    total_shipping_cost: Optional[Money] = Field(default=None, description="A number equal to the total shipping cost of the receipt.")
    total_tax_cost: Optional[Money] = Field(default=None, description="The total sales tax of the receipt.")
    total_vat_cost: Optional[Money] = Field(default=None, description="A number equal to the total value-added tax (VAT) of the receipt.")
    discount_amt: Optional[Money] = Field(default=None, description="The numeric total discounted price for the receipt when using a discount (percent or fixed) coupon. Free shipping coupons are not included in this discount amount.")
    gift_wrap_price: Optional[Money] = Field(default=None, description="The numeric price of gift wrap for this receipt.")
    shipments: Optional[List[ShopReceiptShipment]] = Field(default=None, description="A list of shipment statements for this receipt.")
    transactions: Optional[List[ShopReceiptTransaction]] = Field(default=None, description="Array of transactions for the receipt.")
    refunds: Optional[List[ShopRefund]] = Field(default=None, description="Refunds for a given receipt.")
    __properties: ClassVar[List[str]] = ["receipt_id", "receipt_type", "seller_user_id", "seller_email", "buyer_user_id", "buyer_email", "name", "first_line", "second_line", "city", "state", "zip", "status", "formatted_address", "country_iso", "payment_method", "payment_email", "message_from_seller", "message_from_buyer", "message_from_payment", "is_paid", "is_shipped", "create_timestamp", "created_timestamp", "update_timestamp", "updated_timestamp", "is_gift", "gift_message", "gift_sender", "grandtotal", "subtotal", "total_price", "total_shipping_cost", "total_tax_cost", "total_vat_cost", "discount_amt", "gift_wrap_price", "shipments", "transactions", "refunds"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['paid', 'completed', 'open', 'payment processing', 'canceled', 'fully refunded', 'partially refunded']):
            raise ValueError("must be one of enum values ('paid', 'completed', 'open', 'payment processing', 'canceled', 'fully refunded', 'partially refunded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShopReceipt from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of grandtotal
        if self.grandtotal:
            _dict['grandtotal'] = self.grandtotal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subtotal
        if self.subtotal:
            _dict['subtotal'] = self.subtotal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_price
        if self.total_price:
            _dict['total_price'] = self.total_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_shipping_cost
        if self.total_shipping_cost:
            _dict['total_shipping_cost'] = self.total_shipping_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_tax_cost
        if self.total_tax_cost:
            _dict['total_tax_cost'] = self.total_tax_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_vat_cost
        if self.total_vat_cost:
            _dict['total_vat_cost'] = self.total_vat_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount_amt
        if self.discount_amt:
            _dict['discount_amt'] = self.discount_amt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gift_wrap_price
        if self.gift_wrap_price:
            _dict['gift_wrap_price'] = self.gift_wrap_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipments (list)
        _items = []
        if self.shipments:
            for _item_shipments in self.shipments:
                if _item_shipments:
                    _items.append(_item_shipments.to_dict())
            _dict['shipments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item_transactions in self.transactions:
                if _item_transactions:
                    _items.append(_item_transactions.to_dict())
            _dict['transactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in refunds (list)
        _items = []
        if self.refunds:
            for _item_refunds in self.refunds:
                if _item_refunds:
                    _items.append(_item_refunds.to_dict())
            _dict['refunds'] = _items
        # set to None if seller_email (nullable) is None
        # and model_fields_set contains the field
        if self.seller_email is None and "seller_email" in self.model_fields_set:
            _dict['seller_email'] = None

        # set to None if buyer_email (nullable) is None
        # and model_fields_set contains the field
        if self.buyer_email is None and "buyer_email" in self.model_fields_set:
            _dict['buyer_email'] = None

        # set to None if first_line (nullable) is None
        # and model_fields_set contains the field
        if self.first_line is None and "first_line" in self.model_fields_set:
            _dict['first_line'] = None

        # set to None if second_line (nullable) is None
        # and model_fields_set contains the field
        if self.second_line is None and "second_line" in self.model_fields_set:
            _dict['second_line'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['zip'] = None

        # set to None if formatted_address (nullable) is None
        # and model_fields_set contains the field
        if self.formatted_address is None and "formatted_address" in self.model_fields_set:
            _dict['formatted_address'] = None

        # set to None if country_iso (nullable) is None
        # and model_fields_set contains the field
        if self.country_iso is None and "country_iso" in self.model_fields_set:
            _dict['country_iso'] = None

        # set to None if payment_email (nullable) is None
        # and model_fields_set contains the field
        if self.payment_email is None and "payment_email" in self.model_fields_set:
            _dict['payment_email'] = None

        # set to None if message_from_seller (nullable) is None
        # and model_fields_set contains the field
        if self.message_from_seller is None and "message_from_seller" in self.model_fields_set:
            _dict['message_from_seller'] = None

        # set to None if message_from_buyer (nullable) is None
        # and model_fields_set contains the field
        if self.message_from_buyer is None and "message_from_buyer" in self.model_fields_set:
            _dict['message_from_buyer'] = None

        # set to None if message_from_payment (nullable) is None
        # and model_fields_set contains the field
        if self.message_from_payment is None and "message_from_payment" in self.model_fields_set:
            _dict['message_from_payment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShopReceipt from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "receipt_id": obj.get("receipt_id"),
            "receipt_type": obj.get("receipt_type"),
            "seller_user_id": obj.get("seller_user_id"),
            "seller_email": obj.get("seller_email"),
            "buyer_user_id": obj.get("buyer_user_id"),
            "buyer_email": obj.get("buyer_email"),
            "name": obj.get("name"),
            "first_line": obj.get("first_line"),
            "second_line": obj.get("second_line"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "zip": obj.get("zip"),
            "status": obj.get("status"),
            "formatted_address": obj.get("formatted_address"),
            "country_iso": obj.get("country_iso"),
            "payment_method": obj.get("payment_method"),
            "payment_email": obj.get("payment_email"),
            "message_from_seller": obj.get("message_from_seller"),
            "message_from_buyer": obj.get("message_from_buyer"),
            "message_from_payment": obj.get("message_from_payment"),
            "is_paid": obj.get("is_paid"),
            "is_shipped": obj.get("is_shipped"),
            "create_timestamp": obj.get("create_timestamp"),
            "created_timestamp": obj.get("created_timestamp"),
            "update_timestamp": obj.get("update_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp"),
            "is_gift": obj.get("is_gift"),
            "gift_message": obj.get("gift_message"),
            "gift_sender": obj.get("gift_sender"),
            "grandtotal": Money.from_dict(obj["grandtotal"]) if obj.get("grandtotal") is not None else None,
            "subtotal": Money.from_dict(obj["subtotal"]) if obj.get("subtotal") is not None else None,
            "total_price": Money.from_dict(obj["total_price"]) if obj.get("total_price") is not None else None,
            "total_shipping_cost": Money.from_dict(obj["total_shipping_cost"]) if obj.get("total_shipping_cost") is not None else None,
            "total_tax_cost": Money.from_dict(obj["total_tax_cost"]) if obj.get("total_tax_cost") is not None else None,
            "total_vat_cost": Money.from_dict(obj["total_vat_cost"]) if obj.get("total_vat_cost") is not None else None,
            "discount_amt": Money.from_dict(obj["discount_amt"]) if obj.get("discount_amt") is not None else None,
            "gift_wrap_price": Money.from_dict(obj["gift_wrap_price"]) if obj.get("gift_wrap_price") is not None else None,
            "shipments": [ShopReceiptShipment.from_dict(_item) for _item in obj["shipments"]] if obj.get("shipments") is not None else None,
            "transactions": [ShopReceiptTransaction.from_dict(_item) for _item in obj["transactions"]] if obj.get("transactions") is not None else None,
            "refunds": [ShopRefund.from_dict(_item) for _item in obj["refunds"]] if obj.get("refunds") is not None else None
        })
        return _obj


