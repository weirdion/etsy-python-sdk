# coding: utf-8

"""
    Etsy Open API v3

    <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

    The version of the OpenAPI document: 3.0.0
    Contact: developers@etsy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from etsy_python_sdk.models.money import Money
from etsy_python_sdk.models.payment_adjustment import PaymentAdjustment
from typing import Optional, Set
from typing_extensions import Self

class Payment(BaseModel):
    """
    Represents a payment made with Etsy Payments. All monetary amounts are in USD pennies unless otherwise specified.
    """ # noqa: E501
    payment_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).")
    buyer_user_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for the [user](/documentation/reference#tag/User) who paid the purchase.")
    shop_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The unique positive non-zero numeric ID for an Etsy Shop.")
    receipt_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.")
    amount_gross: Optional[Money] = Field(default=None, description="An integer equal to gross amount of the order, in pennies, including shipping and taxes.")
    amount_fees: Optional[Money] = Field(default=None, description="An integer equal to the original card processing fee of the order in pennies.")
    amount_net: Optional[Money] = Field(default=None, description="An integer equal to the payment value, in pennies, less fees (`amount_gross` - `amount_fees`).")
    posted_gross: Optional[Money] = Field(default=None, description="The total gross value of the payment posted once the purchase ships. This is equal to the `amount_gross` UNLESS the seller issues a refund prior to shipping. We consider \"shipping\" to be the event which \"posts\" to the ledger. Therefore, if the seller refunds first, we reduce the `amount_gross` first and post then that amount. The seller never sees the refunded amount in their ledger. This is equal to the \"Credit\" amount in the ledger entry.")
    posted_fees: Optional[Money] = Field(default=None, description="The total value of the fees posted once the purchase ships. Etsy refunds a proportional amount of the fees when a seller refunds a buyer. When the seller issues a refund prior to shipping, the posted amount is less then the original.")
    posted_net: Optional[Money] = Field(default=None, description="The total value of the payment at the time of posting, less fees. (`posted_gross` - `posted_fees`)")
    adjusted_gross: Optional[Money] = Field(default=None, description="The gross payment amount after the seller refunds a payment, partially or fully.")
    adjusted_fees: Optional[Money] = Field(default=None, description="The new fee amount after a seller refunds a payment, partially or fully.")
    adjusted_net: Optional[Money] = Field(default=None, description="The total value of the payment after refunds, less fees (`adjusted_gross` - `adjusted_fees`).")
    currency: Optional[StrictStr] = Field(default=None, description="The ISO (alphabetic) code string for the payment's currency.")
    shop_currency: Optional[StrictStr] = Field(default=None, description="The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.")
    buyer_currency: Optional[StrictStr] = Field(default=None, description="The currency string of the buyer.")
    shipping_user_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID of the user to which the seller ships the order.")
    shipping_address_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric id identifying the shipping address.")
    billing_address_id: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=0)]] = Field(default=None, description="The numeric ID identifying the billing address of the buyer.")
    status: Optional[StrictStr] = Field(default=None, description="A string indicating the current status of the payment, most commonly \"settled\" or \"authed\".")
    shipped_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The transaction\\'s shipping date and time, in epoch seconds.")
    create_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The transaction\\'s creation date and time, in epoch seconds.")
    created_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The transaction\\'s creation date and time, in epoch seconds.")
    update_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The date and time of the last change to the payment adjustment in epoch seconds.")
    updated_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The date and time of the last change to the payment adjustment in epoch seconds.")
    payment_adjustments: Optional[List[PaymentAdjustment]] = Field(default=None, description="List of refund objects on an Etsy Payments transaction. All monetary amounts are in USD pennies unless otherwise specified.")
    __properties: ClassVar[List[str]] = ["payment_id", "buyer_user_id", "shop_id", "receipt_id", "amount_gross", "amount_fees", "amount_net", "posted_gross", "posted_fees", "posted_net", "adjusted_gross", "adjusted_fees", "adjusted_net", "currency", "shop_currency", "buyer_currency", "shipping_user_id", "shipping_address_id", "billing_address_id", "status", "shipped_timestamp", "create_timestamp", "created_timestamp", "update_timestamp", "updated_timestamp", "payment_adjustments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount_gross
        if self.amount_gross:
            _dict['amount_gross'] = self.amount_gross.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount_fees
        if self.amount_fees:
            _dict['amount_fees'] = self.amount_fees.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount_net
        if self.amount_net:
            _dict['amount_net'] = self.amount_net.to_dict()
        # override the default output from pydantic by calling `to_dict()` of posted_gross
        if self.posted_gross:
            _dict['posted_gross'] = self.posted_gross.to_dict()
        # override the default output from pydantic by calling `to_dict()` of posted_fees
        if self.posted_fees:
            _dict['posted_fees'] = self.posted_fees.to_dict()
        # override the default output from pydantic by calling `to_dict()` of posted_net
        if self.posted_net:
            _dict['posted_net'] = self.posted_net.to_dict()
        # override the default output from pydantic by calling `to_dict()` of adjusted_gross
        if self.adjusted_gross:
            _dict['adjusted_gross'] = self.adjusted_gross.to_dict()
        # override the default output from pydantic by calling `to_dict()` of adjusted_fees
        if self.adjusted_fees:
            _dict['adjusted_fees'] = self.adjusted_fees.to_dict()
        # override the default output from pydantic by calling `to_dict()` of adjusted_net
        if self.adjusted_net:
            _dict['adjusted_net'] = self.adjusted_net.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_adjustments (list)
        _items = []
        if self.payment_adjustments:
            for _item_payment_adjustments in self.payment_adjustments:
                if _item_payment_adjustments:
                    _items.append(_item_payment_adjustments.to_dict())
            _dict['payment_adjustments'] = _items
        # set to None if posted_gross (nullable) is None
        # and model_fields_set contains the field
        if self.posted_gross is None and "posted_gross" in self.model_fields_set:
            _dict['posted_gross'] = None

        # set to None if posted_fees (nullable) is None
        # and model_fields_set contains the field
        if self.posted_fees is None and "posted_fees" in self.model_fields_set:
            _dict['posted_fees'] = None

        # set to None if posted_net (nullable) is None
        # and model_fields_set contains the field
        if self.posted_net is None and "posted_net" in self.model_fields_set:
            _dict['posted_net'] = None

        # set to None if adjusted_gross (nullable) is None
        # and model_fields_set contains the field
        if self.adjusted_gross is None and "adjusted_gross" in self.model_fields_set:
            _dict['adjusted_gross'] = None

        # set to None if adjusted_fees (nullable) is None
        # and model_fields_set contains the field
        if self.adjusted_fees is None and "adjusted_fees" in self.model_fields_set:
            _dict['adjusted_fees'] = None

        # set to None if adjusted_net (nullable) is None
        # and model_fields_set contains the field
        if self.adjusted_net is None and "adjusted_net" in self.model_fields_set:
            _dict['adjusted_net'] = None

        # set to None if shop_currency (nullable) is None
        # and model_fields_set contains the field
        if self.shop_currency is None and "shop_currency" in self.model_fields_set:
            _dict['shop_currency'] = None

        # set to None if buyer_currency (nullable) is None
        # and model_fields_set contains the field
        if self.buyer_currency is None and "buyer_currency" in self.model_fields_set:
            _dict['buyer_currency'] = None

        # set to None if shipping_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_user_id is None and "shipping_user_id" in self.model_fields_set:
            _dict['shipping_user_id'] = None

        # set to None if shipped_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.shipped_timestamp is None and "shipped_timestamp" in self.model_fields_set:
            _dict['shipped_timestamp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payment_id": obj.get("payment_id"),
            "buyer_user_id": obj.get("buyer_user_id"),
            "shop_id": obj.get("shop_id"),
            "receipt_id": obj.get("receipt_id"),
            "amount_gross": Money.from_dict(obj["amount_gross"]) if obj.get("amount_gross") is not None else None,
            "amount_fees": Money.from_dict(obj["amount_fees"]) if obj.get("amount_fees") is not None else None,
            "amount_net": Money.from_dict(obj["amount_net"]) if obj.get("amount_net") is not None else None,
            "posted_gross": Money.from_dict(obj["posted_gross"]) if obj.get("posted_gross") is not None else None,
            "posted_fees": Money.from_dict(obj["posted_fees"]) if obj.get("posted_fees") is not None else None,
            "posted_net": Money.from_dict(obj["posted_net"]) if obj.get("posted_net") is not None else None,
            "adjusted_gross": Money.from_dict(obj["adjusted_gross"]) if obj.get("adjusted_gross") is not None else None,
            "adjusted_fees": Money.from_dict(obj["adjusted_fees"]) if obj.get("adjusted_fees") is not None else None,
            "adjusted_net": Money.from_dict(obj["adjusted_net"]) if obj.get("adjusted_net") is not None else None,
            "currency": obj.get("currency"),
            "shop_currency": obj.get("shop_currency"),
            "buyer_currency": obj.get("buyer_currency"),
            "shipping_user_id": obj.get("shipping_user_id"),
            "shipping_address_id": obj.get("shipping_address_id"),
            "billing_address_id": obj.get("billing_address_id"),
            "status": obj.get("status"),
            "shipped_timestamp": obj.get("shipped_timestamp"),
            "create_timestamp": obj.get("create_timestamp"),
            "created_timestamp": obj.get("created_timestamp"),
            "update_timestamp": obj.get("update_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp"),
            "payment_adjustments": [PaymentAdjustment.from_dict(_item) for _item in obj["payment_adjustments"]] if obj.get("payment_adjustments") is not None else None
        })
        return _obj


