# coding: utf-8

"""
    Etsy Open API v3

    <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

    The version of the OpenAPI document: 3.0.0
    Contact: developers@etsy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from etsy_python_sdk.models.listing_inventory_product_offering import ListingInventoryProductOffering
from etsy_python_sdk.models.listing_property_value import ListingPropertyValue
from typing import Optional, Set
from typing_extensions import Self

class ListingInventoryProduct(BaseModel):
    """
    A representation of a product for a listing.
    """ # noqa: E501
    product_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for a specific [product](/documentation/reference#tag/ShopListing-Product) purchased from a listing.")
    sku: Optional[StrictStr] = Field(default=None, description="The SKU string for the product")
    is_deleted: Optional[StrictBool] = Field(default=None, description="When true, someone deleted this product.")
    offerings: Optional[List[ListingInventoryProductOffering]] = Field(default=None, description="A list of product offering entries for this product.")
    property_values: Optional[List[ListingPropertyValue]] = Field(default=None, description="A list of property value entries for this product. Note: parenthesis characters (`(` and `)`) are not allowed.")
    __properties: ClassVar[List[str]] = ["product_id", "sku", "is_deleted", "offerings", "property_values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListingInventoryProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in offerings (list)
        _items = []
        if self.offerings:
            for _item_offerings in self.offerings:
                if _item_offerings:
                    _items.append(_item_offerings.to_dict())
            _dict['offerings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in property_values (list)
        _items = []
        if self.property_values:
            for _item_property_values in self.property_values:
                if _item_property_values:
                    _items.append(_item_property_values.to_dict())
            _dict['property_values'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListingInventoryProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "product_id": obj.get("product_id"),
            "sku": obj.get("sku"),
            "is_deleted": obj.get("is_deleted"),
            "offerings": [ListingInventoryProductOffering.from_dict(_item) for _item in obj["offerings"]] if obj.get("offerings") is not None else None,
            "property_values": [ListingPropertyValue.from_dict(_item) for _item in obj["property_values"]] if obj.get("property_values") is not None else None
        })
        return _obj


