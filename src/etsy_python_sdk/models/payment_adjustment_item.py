# coding: utf-8

"""
    Etsy Open API v3

    <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

    The version of the OpenAPI document: 3.0.0
    Contact: developers@etsy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PaymentAdjustmentItem(BaseModel):
    """
    A payemnt adjustment line item for a payment adjustment.
    """ # noqa: E501
    payment_adjustment_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The numeric ID for a payment adjustment.")
    payment_adjustment_item_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Unique ID for the adjustment line item.")
    adjustment_type: Optional[StrictStr] = Field(default=None, description="String indicating the type of adjustment for this line item.")
    amount: Optional[StrictInt] = Field(default=0, description="Integer value for the amount of the adjustment in original currency.")
    shop_amount: Optional[StrictInt] = Field(default=0, description="Integer value for the amount of the adjustment in currency for the shop.")
    transaction_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The unique numeric ID for a transaction.")
    bill_payment_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Unique ID for the bill payment adjustment.")
    created_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The transaction\\'s creation date and time, in epoch seconds.")
    updated_timestamp: Optional[Annotated[int, Field(strict=True, ge=946684800)]] = Field(default=None, description="The update date and time the payment adjustment in epoch seconds.")
    __properties: ClassVar[List[str]] = ["payment_adjustment_id", "payment_adjustment_item_id", "adjustment_type", "amount", "shop_amount", "transaction_id", "bill_payment_id", "created_timestamp", "updated_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentAdjustmentItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if adjustment_type (nullable) is None
        # and model_fields_set contains the field
        if self.adjustment_type is None and "adjustment_type" in self.model_fields_set:
            _dict['adjustment_type'] = None

        # set to None if transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_id is None and "transaction_id" in self.model_fields_set:
            _dict['transaction_id'] = None

        # set to None if bill_payment_id (nullable) is None
        # and model_fields_set contains the field
        if self.bill_payment_id is None and "bill_payment_id" in self.model_fields_set:
            _dict['bill_payment_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentAdjustmentItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payment_adjustment_id": obj.get("payment_adjustment_id"),
            "payment_adjustment_item_id": obj.get("payment_adjustment_item_id"),
            "adjustment_type": obj.get("adjustment_type"),
            "amount": obj.get("amount") if obj.get("amount") is not None else 0,
            "shop_amount": obj.get("shop_amount") if obj.get("shop_amount") is not None else 0,
            "transaction_id": obj.get("transaction_id"),
            "bill_payment_id": obj.get("bill_payment_id"),
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp")
        })
        return _obj


